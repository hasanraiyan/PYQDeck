{
  "branches": [
    {
      "id": "it",
      "name": "INFORMATION TECHNOLOGY",
      "icon": {
        "set": "Ionicons",
        "name": "laptop-outline"
      },
      "semesters": [
        {
          "id": "it_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "it_100304",
              "name": "DATA STRUCTURE & ALGORITHMS",
              "code": "100304",
              "modules": [
                {
                  "id": "m1",
                  "name": "Module 1: Introduction & Analysis",
                  "description": "Basic Terminologies: Elementary Data Organizations, Data Structure Operations: insertion, deletion, traversal etc.; Analysis of an Algorithm, Asymptotic Notations, Time-Space trade off.",
                  "lectures": 4
                },
                {
                  "id": "m2",
                  "name": "Module 2: Stacks and Queues",
                  "description": "ADT Stack and its operations: Algorithms and their complexity analysis, Applications of Stacks: Expression Conversion and evaluation – corresponding algorithms and complexity analysis. ADT queue, Types of Queue: Simple Queue, Circular Queue, Priority Queue; Operations on each Type of Queues: Algorithms and their analysis.",
                  "lectures": 10
                },
                {
                  "id": "m3",
                  "name": "Module 3: Linked Lists",
                  "description": "Singly linked lists: Representation in memory, Algorithms of several operations: Traversing, Searching, Insertion into, Deletion from linked list; Linked representation of Stack and Queue, Header nodes, doubly linked list: operations on it and algorithmic analysis; Circular Linked Lists: all operations their algorithms and the complexity analysis.",
                  "lectures": 6
                },
                {
                  "id": "m4",
                  "name": "Module 4: Searching, Sorting and Hashing",
                  "description": "Linear Search and Binary Search Techniques and their complexity analysis Objective and properties of different sorting algorithms: Selection Sort, Bubble Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort; Performance and Comparison among all the methods, Hashing.",
                  "lectures": 12
                },
                {
                  "id": "m5",
                  "name": "Module 5: Trees and Graphs",
                  "description": "Trees: Basic Tree Terminologies, Different types of Trees: Binary Tree, Threaded Binary Tree, Binary Search Tree, AVL Tree; Tree operations on each of the trees and their algorithms with complexity analysis. Applications of Binary Trees. B Tree, B+ Tree: definitions, algorithms and analysis. Graph: Basic Terminologies and Representations, Graph search and traversal algorithms and complexity analysis.",
                  "lectures": 8
                }
              ],
              "questions": [
                {
                  "questionId": "it_100304_2019_Q1a",
                  "year": 2019,
                  "qNumber": "Q1a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Which of the following points is/are true about linked list data structure when it is compared with array?\n\n(i) Arrays have better cache locality that can make them better in terms of performance.\n(ii) It is easy to insert and delete elements in linked list.\n(iii) The size of array has to be pre-decided, linked lists can change their size any time.\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1b",
                  "year": 2019,
                  "qNumber": "Q1b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the functionality of the following code?\n```java\npublic void function (Node node) {\n  if(size == 0)\n    head = node;\n  else{\n    Node temp, cur;\n    for(cur = head;\n        (temp = cur.getNext())! = null; cur = temp);\n    cur.setNext(node);\n  }\n  size++;\n}\n```\n(i) Inserting a node at the beginning of the list\n(ii) Deleting a node at the beginning of the list\n(iii) Inserting a node at the end of the list\n(iv) Deleting a node at the end of the list",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1c",
                  "year": 2019,
                  "qNumber": "Q1c",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the space complexity for deleting a linked list?\n\n(i) O(1)\n(ii) O(n)\n(iii) Either O(1) or O(n)\n(iv) O(log n)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1d",
                  "year": 2019,
                  "qNumber": "Q1d",
                  "chapter": "Module 3: Linked Lists",
                  "text": "The situation when in a linked list START=NULL is\n\n(i) underflow\n(ii) overflow\n(iii) housefull\n(iv) saturated",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1e",
                  "year": 2019,
                  "qNumber": "Q1e",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\n\n(i) O(1)\n(ii) O(n)\n(iii) θ(n)\n(iv) θ(1)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1f",
                  "year": 2019,
                  "qNumber": "Q1f",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What kind of linked list is best to answer question like \"What is the item at position n\"?\n\n(i) Singly linked list\n(ii) Doubly linked list\n(iii) Circular linked list\n(iv) Array implementation of linked list",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1g",
                  "year": 2019,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Linked Lists",
                  "text": "A variation of linked list is circular linked list, in which the last node in the list points to first node of the list. One problem with this type of list is\n\n(i) it waste memory space since the pointer head already points to the first node and thus the list node does not need to point to the first node\n(ii) it is not possible to add a node at the end of the list\n(iii) it is difficult to traverse the list as the pointer of the last node is now not NULL\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1h",
                  "year": 2019,
                  "qNumber": "Q1h",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Each node in a linked list must contain at least\n\n(i) three fields\n(ii) two fields\n(iii) four fields\n(iv) five fields",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1i",
                  "year": 2019,
                  "qNumber": "Q1i",
                  "chapter": "Module 3: Linked Lists",
                  "text": "A linear list in which the last node points to the first node is\n\n(i) singly linked list\n(ii) circular linked list\n(iii) doubly linked list\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1j",
                  "year": 2019,
                  "qNumber": "Q1j",
                  "chapter": "Module 3: Linked Lists",
                  "text": "In a linked list, insertion can be done as\n\n(i) beginning\n(ii) end\n(iii) middle\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q2",
                  "year": 2019,
                  "qNumber": "Q2",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "What is a Hash Table, and what is the average case and worst-case time for each of its operations? How can we use this structure to find all anagrams in a dictionary?",
                  "type": "Explanation & Application",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q3",
                  "year": 2019,
                  "qNumber": "Q3",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Describe insertion in max heap tree with example from the following list of numbers: 33, 42, 67, 23, 44, 49, 74",
                  "type": "Explanation with Example",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q4",
                  "year": 2019,
                  "qNumber": "Q4",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Sort the given values using quicksort and write time complexity of algorithm: 65, 70, 75, 80, 85, 60, 55, 50, 45",
                  "type": "Algorithm Application & Analysis",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q5a",
                  "year": 2019,
                  "qNumber": "Q5a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following sequence of elements into an AVL tree, starting with an empty tree : 10, 20, 15, 25, 30, 16, 18, 19",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q5b",
                  "year": 2019,
                  "qNumber": "Q5b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Delete 30 in the AVL tree that you got.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q6a",
                  "year": 2019,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write algorithm for quicksort and mention time and space complexity in each case.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q6b",
                  "year": 2019,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Define collision in hashing. What are the different methodologies to resolve collision? Explain briefly.",
                  "type": "Definition & Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q7",
                  "year": 2019,
                  "qNumber": "Q7",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Construct binary search tree and write pre- and post-order traversals of this tree. 8, 3, 1, 10, 6, 14, 4, 7, 13, 22, 5",
                  "type": "Problem & Traversal",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q8a",
                  "year": 2019,
                  "qNumber": "Q8a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write algorithm to count leaf node in binary tree and check whether tree is balanced or not.",
                  "type": "Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q8b",
                  "year": 2019,
                  "qNumber": "Q8b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write a recursive and iterative version of insertion sort algorithm and mention time complexity.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q9a",
                  "year": 2019,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: BFS",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2019_Q9b",
                  "year": 2019,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: DFS",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2019_Q9c",
                  "year": 2019,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Binary search tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2019_Q9d",
                  "year": 2019,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Balance factor",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q1a",
                  "year": 2020,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following is time complexity of the given code?\n```cpp\nint a = 0;\nfor (i = 0; i<N; i++) {\n  for (j = N; j>i; j--){\n    a = a + i + j;\n  }\n}\n```\n(i) O(N)\n(ii) O(N*log(N))\n(iii) O(N*Sqrt(N))\n(iv) O(N*N)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1b",
                  "year": 2020,
                  "qNumber": "Q1b",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following is time complexity of the given code?\n```cpp\nint i, j, k = 0;\nfor (i = n/2; i<= n; i++) {\n  for (j = 2; j<= n; j = j*2) {\n    k = k + n/2;\n  }\n}\n```\n(i) O(N)\n(ii) O(N*log(N))\n(iii) O(N*Sqrt(N))\n(iv) O(N*N)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1c",
                  "year": 2020,
                  "qNumber": "Q1c",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following cases does not exist in complexity theory?\n\n(i) Best case\n(ii) Worst case\n(iii) Average case\n(iv) Null case",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1d",
                  "year": 2020,
                  "qNumber": "Q1d",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "The operation of processing each element in the list is known as\n\n(i) sorting\n(ii) merging\n(iii) inserting\n(iv) traversal",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1e",
                  "year": 2020,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Arrays are best data structures\n\n(i) for relatively permanent collections of data\n(ii) for the size of the structure and the data in the structure are constantly changing\n(iii) Both (i) and (ii)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1f",
                  "year": 2020,
                  "qNumber": "Q1f",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Each array declaration needs not give, implicitly or explicitly the information about\n\n(i) the name of array\n(ii) the data type of array\n(iii) the first data from the set to be stored\n(iv) the index set of the array",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1g",
                  "year": 2020,
                  "qNumber": "Q1g",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "In general, the binary search method needs not more than ______ comparisons.\n\n(i) [log2 n]-1\n(ii) [log2 n]+1\n(iii) [log2 n]\n(iv) [log2 n]+1",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1h",
                  "year": 2020,
                  "qNumber": "Q1h",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "State True or False :\nA. Binary search is used for searching in a sorted array.\nB. The time complexity of binary search is O(log n).\n\n(i) True, False\n(ii) False, True\n(iii) False, False\n(iv) True, True",
                  "type": "MCQ_TrueFalse",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1i",
                  "year": 2020,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which of the following is non-linear data structure?\n\n(i) Stack\n(ii) Linked list\n(iii) String\n(iv) Tree",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1j",
                  "year": 2020,
                  "qNumber": "Q1j",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which is the correct output for the following sequence of operations?\npush(5)\npush(8)\npop\npush(2)\npush(5)\npop\npop\npop\npush(1)\npop\n\n(i) 8 5 2 5 1\n(ii) 8 5 5 2 1\n(iii) 8 2 5 5 1\n(iv) 8 1 2 5 5",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q2",
                  "year": 2020,
                  "qNumber": "Q2",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Analyse the time complexity of the given function and also write the recurrence relation of the function :\n```cpp\nint DoSomething (int n)\n{\n  if (n<= 2)\n    return 1;\n  else\n    return (DoSomething (floor(sqrt(n)))+n);\n}\n```",
                  "type": "Analysis & RecurrenceRelation",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q3",
                  "year": 2020,
                  "qNumber": "Q3",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Consider the following postfix expression : 8 7 3 - / 6 2 5 4 + * + -\nThe above expression is evaluated using stack. Show the content of stack after each step.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q4",
                  "year": 2020,
                  "qNumber": "Q4",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "What are the different notations for comparing the time complexity of an algorithm? Explain each of them with neat figures.",
                  "type": "Explanation with Diagram",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q5",
                  "year": 2020,
                  "qNumber": "Q5",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Explain the queue and circular queue with examples. Also, write the differences between the two.",
                  "type": "Explanation with Example & Differentiate",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q6",
                  "year": 2020,
                  "qNumber": "Q6",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Let a and b be positive integers. Suppose a function F is defined recursively as follows:\nF(a, b) = { 0 if a<b; F(a-b, b)+1 if b<=a }\nFind the values of the following :\n(a) F(2, 3)\n(b) F(14, 3)",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q7a",
                  "year": 2020,
                  "qNumber": "Q7a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write the algorithm of prefix evaluation with example.",
                  "type": "Algorithm with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2020_Q7b",
                  "year": 2020,
                  "qNumber": "Q7b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write prefix notation of the following infix notation : A+B*C+D",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2020_Q8",
                  "year": 2020,
                  "qNumber": "Q8",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What do you mean by ADT? Explain the ADT stack with test cases for both pop and push.",
                  "type": "Definition & Explanation",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q9a",
                  "year": 2020,
                  "qNumber": "Q9a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write short notes on the following: Hashing",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q9b",
                  "year": 2020,
                  "qNumber": "Q9b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write short notes on the following: Circular linked list",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q9c",
                  "year": 2020,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Adjacency list",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q9d",
                  "year": 2020,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: AVL tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2021_Q1a",
                  "year": 2021,
                  "qNumber": "Q1a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "What is the worst case run-time complexity of binary search algorithm?\n\n(i) O(n^2)\n(ii) O(n^log n)\n(iii) O(n^3)\n(iv) O(n)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1b",
                  "year": 2021,
                  "qNumber": "Q1b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "push() and pop() functions are found in\n\n(i) queues\n(ii) list\n(iii) stacks\n(iv) trees",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1c",
                  "year": 2021,
                  "qNumber": "Q1c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Binary search tree has average case run-time complexity of O(log n). What could be the worst case?\n\n(i) O(n)\n(ii) O(n^2)\n(iii) O(n^3)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1d",
                  "year": 2021,
                  "qNumber": "Q1d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "What will be the running-time of Dijkstra's single-source shortest path algorithm, if the graph G(V, E) is stored in the form of adjacency list and binary heap is used?\n\n(i) O(|V|^2)\n(ii) O(|V|log|V|)\n(iii) O(|E|+|V|log|V|)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1e",
                  "year": 2021,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Tower of Hanoi is a classic example of\n\n(i) divide and conquer\n(ii) recursive approach\n(iii) (ii) but not (i)\n(iv) Both (i) and (ii)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1f",
                  "year": 2021,
                  "qNumber": "Q1f",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "If locality is a concern, you can use ___ to traverse the graph.\n\n(i) breadth-first search\n(ii) depth-first search\n(iii) either BFS or DFS\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1g",
                  "year": 2021,
                  "qNumber": "Q1g",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which data structure is used for balancing of symbols?\n\n(i) Queue\n(ii) Stack\n(iii) Tree\n(iv) Graph",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1h",
                  "year": 2021,
                  "qNumber": "Q1h",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which data structure is most efficient to find the top 10 largest items out of 1 million items stored in file?\n\n(i) Min heap\n(ii) Max heap\n(iii) Binary search tree\n(iv) AVL tree",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1i",
                  "year": 2021,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "A data structure is required for storing a set of integers such that each of the following operations can be done in (log n) time, where n is the number of elements in the set:\n\n* Deletion of the smallest element\n* Insertion of an element if it is not already present in the set\nWhich of the following can be used?\n\n(i) A heap can be used but not a balanced binary search tree\n(ii) A balanced binary search tree can be used but not a heap\n(iii) Both balanced binary search tree and heap can be used\n(iv) Neither balanced binary search tree nor heap can be used",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1j",
                  "year": 2021,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The most appropriate matching for the following pairs is\nX. Depth-first search  1. Heap\nY. Breadth-first search 2. Queue\nZ. Sorting              3. Stack\n\n(i) X-1, Y-2, Z-3\n(ii) X-3, Y-1, Z-2\n(iii) X-3, Y-2, Z-1\n(iv) X-2, Y-3, Z-1",
                  "type": "MCQ_Matching",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q2a",
                  "year": 2021,
                  "qNumber": "Q2a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Josephus problem: A group of soldiers is surrounded by an overwhelming army. There is no hope of victory without reinforcements. There is only a single horse available for escape. The soldiers agree to a pact to determine which of them is to escape and summon help. They form a circle, and a number (n) and one of their names are picked from a hat. Beginning with the soldier whose name is picked, they begin to count clockwise around the circle. When the count reaches (n), that soldier is removed from the circle, and the count begins again with the next soldier. The eliminated soldier is no longer a part of the circle. The process continues until one soldier remains and takes the horse to summon help.\nSuppose n=3 and there are five soldiers who form a circle in the order A, B, C, D and E. Let the soldier to start with A, so C is eliminated first, then A gets eliminated second, then E at third, finally B gets eliminated. So D is the one who escapes with the horse.\nWrite a function in C which displays the names of every soldier in the order of their elimination and finally the name of the soldier left, using circular linked list. New list should not be created.",
                  "type": "Problem/Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2021_Q2b",
                  "year": 2021,
                  "qNumber": "Q2b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write a program in C to insert an element after an existing element in a doubly linked list.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2021_Q3a",
                  "year": 2021,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty AVL tree :\n 1, 26, 2, 25, 3, 24, 4, 23, 5\nDisplay the tree after every insertion. Also state the minimum number of nodes which are required to construct AVL tree of height 7 (note that the root is at level 0).",
                  "type": "Problem & Analysis",
                  "marks": 8
                },
                {
                  "questionId": "it_100304_2021_Q3b",
                  "year": 2021,
                  "qNumber": "Q3b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Sort the following numbers in ascending order using heapsort. Show step-by-step analysis: 25, 57, 48, 37, 12, 92, 86, 33",
                  "type": "Algorithm Application",
                  "marks": 6
                },
                {
                  "questionId": "it_100304_2021_Q4",
                  "year": 2021,
                  "qNumber": "Q4",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty B tree of order 5 and display the tree at every split :\n 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nNow delete the following elements from the tree, in the given sequence, and display the tree at every merge.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2021_Q5",
                  "year": 2021,
                  "qNumber": "Q5",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty B+ tree of order 3 and display the tree at every split : \n10, 20, 30, 90, 80, 60, 70, 40, 50, 66, 16, 84, 21, 76\nNow delete the following elements from the tree, in the given sequence, and display the tree at every merge.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2021_Q6a",
                  "year": 2021,
                  "qNumber": "Q6a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Construct the Huffman tree for data given in the table below :\nAlphabet | Frequency\n---------------------\nR | 5\nT | 6\nY | 2\nC | 16\nS | 3\nL | 60\nA | 8",
                  "type": "Problem",
                  "marks": 8
                },
                {
                  "questionId": "it_100304_2021_Q6b",
                  "year": 2021,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Show at every step the contents of the hash table after inserting the keys in the order 23, 11, 4, 17, 84, 22, 33. The hash function is given as h(key) = key%11\nThe hash table has a space for 11 keys only. Resolve collision using-\n(i) linear probing;\n(ii) quadratic probing.",
                  "type": "Problem",
                  "marks": 6
                },
                {
                  "questionId": "it_100304_2021_Q7a",
                  "year": 2021,
                  "qNumber": "Q7a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Differentiate between the following: Abstract Data Type and Data Structure",
                  "type": "Differentiate",
                  "marks": 4
                },
                {
                  "questionId": "it_100304_2021_Q7b",
                  "year": 2021,
                  "qNumber": "Q7b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Differentiate between the following: Stack and Queue",
                  "type": "Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "it_100304_2021_Q7c",
                  "year": 2021,
                  "qNumber": "Q7c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Differentiate between the following: Depth-first search and Breadth-first search",
                  "type": "Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "it_100304_2021_Q8",
                  "year": 2021,
                  "qNumber": "Q8",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Explain in detail the Kruskal's and Prim's algorithms for constructing minimum spanning tree. For the weighted undirected graph given below, construct the minimum cost spanning tree for the given graph using Kruskal's algorithm and Prim's algorithm when the starting vertex is R1 :\n ![graph](https://mtjwwpxkwpaagqsnfbks.supabase.co/storage/v1/object/public/images//it_100304_2021_Q8.png)",
                  "type": "Explanation & Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2021_Q9a",
                  "year": 2021,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9b",
                  "year": 2021,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9c",
                  "year": 2021,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Strictly binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9d",
                  "year": 2021,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Complete binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9e",
                  "year": 2021,
                  "qNumber": "Q9e",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Full binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9f",
                  "year": 2021,
                  "qNumber": "Q9f",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Min heap",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9g",
                  "year": 2021,
                  "qNumber": "Q9g",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Skew tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1a",
                  "year": 2022,
                  "qNumber": "Q1a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "In a stack, if a user tries to remove an element from empty stack it is called:\n(i) underflow\n(ii) empty collection\n(iii) garbage collection\n(iv) overflow",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1b",
                  "year": 2022,
                  "qNumber": "Q1b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Consider the binary max-heap implemented using an array. Which one of the following array represents the heap:\n(i) 25, 12, 16, 13, 10, 8, 14\n(ii) 25, 12, 16, 13, 10, 8, 14\n(iii) 25, 14, 16, 13, 10, 8, 12\n(iv) 25, 14, 12, 13, 10, 8, 16",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1c",
                  "year": 2022,
                  "qNumber": "Q1c",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "A hash function is defined as h(key) = key mod 7, with linear probing used to insert keys 44, 45, 79, 55, 91, 18, 63 into a table indexed from 0 to 6. What will be the location of key 18.\n(i) 3\n(ii) 4\n(iii) 5\n(iv) 6",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1d",
                  "year": 2022,
                  "qNumber": "Q1d",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "If the number of values to be sorted is already partially sorted, then ______ sorting can be efficient.\n(i) merge\n(ii) insertion\n(iii) bubble\n(iv) selection",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1e",
                  "year": 2022,
                  "qNumber": "Q1e",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "The time complexity of merge sort is:\n(i) O(n)\n(ii) O(logn)\n(iii) O(nlogn)\n(iv) O(n2)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1f",
                  "year": 2022,
                  "qNumber": "Q1f",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "State true or false:\nA: Binary search is used for searching in a sorted array.\nB: The time complexity of binary search is O(logn)\n(i) True, False\n(ii) False, True\n(iii) False, False\n(iv) True, True",
                  "type": "MCQ_TrueFalse",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1g",
                  "year": 2022,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Linked Lists",
                  "text": "In a circular linked list organization, insertion of a record involves modification of\n(i) One pointer\n(ii) Two pointers\n(iii) More than two pointers\n(iv) No pointer",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1h",
                  "year": 2022,
                  "qNumber": "Q1h",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Level order traversal of a rooted tree can be done by starting from the root and performing\n(i) pre-order traversal\n(ii) in-order traversal\n(iii) depth first search\n(iv) breadth first search",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1i",
                  "year": 2022,
                  "qNumber": "Q1i",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "An Abstract Data Type (ADT) is\n(i) same as an abstract class\n(ii) a data type that cannot be instantiated\n(iii) a data type for which only the operations defined on it can be used, but none else\n(iv) all of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1j",
                  "year": 2022,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "How many distinct BSTs can be constructed with 3 distinct keys?\n(i) 4\n(ii) 5\n(iii) 6\n(iv) 9",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q2a",
                  "year": 2022,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Explain different asymptotic notations (Big-O, Ω, Θ) used for comparing the time complexity of an algorithm with neat figures.",
                  "type": "Explanation with Diagram",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q2b",
                  "year": 2022,
                  "qNumber": "Q2b",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "The run time of an algorithm is represented by the recurrence relation T(n) = 2T(n/2) + n; n ≥ 2 and with boundary condition T(1) = 0. What is the time complexity (in terms of Θ notation).",
                  "type": "Problem/Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q3a",
                  "year": 2022,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Discuss pre-order, in-order and post-order traversal techniques of binary tree. Write a C function for non-recursive pre-order traversal.",
                  "type": "Explanation & Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q3b",
                  "year": 2022,
                  "qNumber": "Q3b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The pre-order traversal sequence of a Binary Search Tree (BST) is 30, 20, 10, 15, 25, 23, 39, 35, 42. Write step by step process to derive the BST and find post-order traversal also.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q4a",
                  "year": 2022,
                  "qNumber": "Q4a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Consider a circular queue of capacity n-elements implemented with an array. Write C functions for insertion and deletion operations.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q4b",
                  "year": 2022,
                  "qNumber": "Q4b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Convert the given infix expression into postfix using stack: A + B / C * (D + E) - F. For each input symbol clearly mention the action taken and status of the stack during conversion.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q5a",
                  "year": 2022,
                  "qNumber": "Q5a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write a C function to delete last node from a singly linked list.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q5b",
                  "year": 2022,
                  "qNumber": "Q5b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Create a max-heap by inserting following keys in the given order. Show each insertion step with clear illustration: 25, 35, 18, 9, 46, 70, 48.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q6a",
                  "year": 2022,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write an algorithm for merge sort and discuss space and time complexity.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q6b",
                  "year": 2022,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Define collision in hashing. Explain briefly different methodologies to resolve collision.",
                  "type": "Definition & Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q7a",
                  "year": 2022,
                  "qNumber": "Q7a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write algorithm to count leaf nodes in a binary tree. What is the complexity of your algorithm?",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q7b",
                  "year": 2022,
                  "qNumber": "Q7b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Compare BFS and DFS traversal techniques for graph. Write an algorithm to perform BFS using queue.",
                  "type": "Comparison & Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q8a",
                  "year": 2022,
                  "qNumber": "Q8a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Differentiate between system defined data types and abstract data types with suitable examples.",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q8b",
                  "year": 2022,
                  "qNumber": "Q8b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is doubly linked list? What are its applications? Explain how a node can be added as last node using appropriate pseudo code",
                  "type": "Explanation & Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9a",
                  "year": 2022,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on any two of the following: AVL Rotations",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9b",
                  "year": 2022,
                  "qNumber": "Q9b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write short notes on any two of the following: Open Addressing & Chaining",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9c",
                  "year": 2022,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on any two of the following: B-Tree",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9d",
                  "year": 2022,
                  "qNumber": "Q9d",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write short notes on any two of the following: Priority Queue",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q1a",
                  "year": 2023,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "What is the time complexity of the following code snippet?\n```cpp\nfor(i=0; i<n; i++){\n  for(j=0; j<i; j++){\n    int sum= i + j;\n  }\n}\n```\n(i) O(n)\n(ii) O(n^2)\n(iii) O(log n)\n(iv) O(1)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1b",
                  "year": 2023,
                  "qNumber": "Q1b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which type of traversal of binary search tree outputs the value in sorted order?\n(i) Pre-order\n(ii) In-order\n(iii) Post-order\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1c",
                  "year": 2023,
                  "qNumber": "Q1c",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Suppose a circular queue of capacity (n - 1) elements is implemented with an array of n elements. Assume that the insertion and deletion operations are carried out using REAR and FRONT as array index variables, respectively. Initially, REAR = FRONT = 0. The conditions to detect queue full and queue empty are\n(i) Full: FRONT == (REAR+1) mod n, Empty: REAR == FRONT\n(ii) Full: FRONT == (REAR+1) mod n, Empty: REAR == (FRONT+1) mod n\n(iii) Full: REAR == FRONT, Empty: FRONT == (REAR+1) mod n\n(iv) Full: REAR == (FRONT+1) mod n, Empty: REAR == FRONT",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1d",
                  "year": 2023,
                  "qNumber": "Q1d",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which of the following data structures can be used for parentheses matching?\n(i) Tree\n(ii) Queue\n(iii) Stack\n(iv) Priority queue",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1e",
                  "year": 2023,
                  "qNumber": "Q1e",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the worst-case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?\n(i) Θ(n)\n(ii) Θ(nlog n)\n(iii) Θ(n^2)\n(iv) Θ(1)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1f",
                  "year": 2023,
                  "qNumber": "Q1f",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What will be the postfix expression for the given infix expression: (a+b)\\*c-d\n(i) -*+abcd\n(ii) ab+c\\*d-\n(iii) ab+cd-\\*\n(iv) abc\\*+d-",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1g",
                  "year": 2023,
                  "qNumber": "Q1g",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What is the outcome of the prefix expression +, -, *, 3, 2, /, 8, 4, 1?\n(i) 12\n(ii) 11\n(iii) 5\n(iv) 4",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1h",
                  "year": 2023,
                  "qNumber": "Q1h",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Where will the new element be inserted in the linked list implementation of the queue?\n(i) At the middle position of the linked list\n(ii) At the head position of the linked list\n(iii) At the tail position of the linked list\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1i",
                  "year": 2023,
                  "qNumber": "Q1i",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Let us consider a list of numbers (34, 16, 2, 93, 80, 77, 51) and a hash table size of 10. What is the order of elements (from index 0 to size-1) in the hash table?\n(i) null, null, 77, 16, null, 34, 93, 2, 51, 80\n(ii) 80, 51, 2, 93, 34, null, 16, 77, null, null\n(iii) 77, 16, 34, 93, 2, 51, 80\n(iv) 80, 51, 2, 93, 34, 16, 77",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q1j",
                  "year": 2023,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The height of a binary tree is the maximum number of edges in any root to leaf path. The maximum number of nodes in a binary tree of height h is:\n(i) 2^h - 1\n(ii) 2^(h-1) - 1\n(iii) 2^(h + 1) - 1\n(iv) 2h+1",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2023_Q2a",
                  "year": 2023,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Why do we need an asymptotic notation? Explain the different asymptotic notations with definitions and examples.",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q2b",
                  "year": 2023,
                  "qNumber": "Q2b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write the worst-case run time complexity of the following algorithms: linear search, bubble sort, merge sort, and push operation in the stack.",
                  "type": "Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q3a",
                  "year": 2023,
                  "qNumber": "Q3a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write push() and pop() functions of a stack.",
                  "type": "Code",
                  "marks": 9
                },
                {
                  "questionId": "it_100304_2023_Q3b",
                  "year": 2023,
                  "qNumber": "Q3b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Evaluate the following postfix expression using STACK. Show all the steps. 8, 2, /, 3, *, 4, -, 6, 2, /, +",
                  "type": "Problem",
                  "marks": 5
                },
                {
                  "questionId": "it_100304_2023_Q4a",
                  "year": 2023,
                  "qNumber": "Q4a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write the algorithm to count the total elements in a singly linked list.",
                  "type": "Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q4b",
                  "year": 2023,
                  "qNumber": "Q4b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "How a doubly linked list is better than a singly linked list? Explain deletion operation on a doubly linked list using an example.",
                  "type": "Comparison & Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q5a",
                  "year": 2023,
                  "qNumber": "Q5a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "The following values are to be stored in a hash table:\n 25, 42, 96, 101, 102, 162, 197. Describe how the values are hashed by using the division method of hashing with a table size of 7. Use chaining as the method of collision resolution.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q5b",
                  "year": 2023,
                  "qNumber": "Q5b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Apply the merge sort on the following numbers. 10, 15, 50, 17, 20, 25, 30, 16, 70, 6.",
                  "type": "Algorithm Application",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q6a",
                  "year": 2023,
                  "qNumber": "Q6a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Differentiate between stack and queue. Explain different types of queues with examples.",
                  "type": "Differentiate & Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q6b",
                  "year": 2023,
                  "qNumber": "Q6b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the properties of a binary search tree. Create a binary search tree using the following elements:\n 45, 15, 79, 90, 10, 55, 12, 20, 50",
                  "type": "Explanation & Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q7a",
                  "year": 2023,
                  "qNumber": "Q7a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Consider the in-order and pre-order traversal of a binary search tree are (1, 2, 3, 4, 5, 6, 8, 10, 25) and (4, 3, 1, 2, 10, 8, 5, 6, 25) respectively. Construct a unique search tree for the given in-order and pre-order traversals.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q7b",
                  "year": 2023,
                  "qNumber": "Q7b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Explain the insertion in the AVL tree using an example.",
                  "type": "Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2023_Q8",
                  "year": 2023,
                  "qNumber": "Q8",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Explain the Heap sort algorithm. Create a heap for the following elements and then sort them.\n 13, 102, 405, 136, 15, 105, 390, 432, 28, 444",
                  "type": "Explanation & Algorithm Application",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2023_Q9a",
                  "year": 2023,
                  "qNumber": "Q9a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write the short note on the following: Circular Queue",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2023_Q9b",
                  "year": 2023,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the short note on the following: Depth first search",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2023_Q9c",
                  "year": 2023,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the short note on the following: B tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2023_Q9d",
                  "year": 2023,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the short note on the following: Adjacency matrix",
                  "type": "Short Notes",
                  "marks": 3.5
                }
              ]
            },
            {
              "id": "it_100313",
              "name": "OBJECT ORIENTED PROGRAMMING USING C++",
              "code": "100313",
              "modules": [
                {
                  "id": "m1",
                  "name": "Module 1: Introduction to C++",
                  "description": "Object Oriented Technology, Advantages of OOP, Input- output in C++, Tokens, Keywords, Identifiers, Data Types C++, Derives data types. The void data type, Type Modifiers, Typecasting, Constant, Operator, Precedence of Operators, Strings.",
                  "lectures": 3
                },
                {
                  "id": "m2",
                  "name": "Module 2: Control Structures and Functions",
                  "description": "Decision making statements like if-else, Nested if-else, goto, break, continue, switch case, Loop statement like for loop, nested for loop, while loop, do-while loop. Parts of Function, User- defined Functions, Value- Returning Functions, void Functions, Value Parameters, Function overloading, Virtual Functions.",
                  "lectures": 6
                },
                {
                  "id": "m3",
                  "name": "Module 3: Classes and Data Abstraction",
                  "description": "Structure in C++, Class, Build- in Operations on Classes, Assignment Operator and Classes, Class Scope, Reference parameters and Class Objects (Variables), Member functions, Accessor and Mutator Functions, Constructors, default Constructor, Destructors.",
                  "lectures": 15
                },
                {
                  "id": "m4",
                  "name": "Module 4: Overloading, Templates and Inheritance",
                  "description": "Operator Overloading, Function Overloading, Function Templates, Class Templates. Single and Multiple Inheritance, virtual Base class, Abstract Class, Pointer and Inheritance, Overloading Member Function.",
                  "lectures": 10
                },
                {
                  "id": "m5",
                  "name": "Module 5: Pointers, Arrays and Exception Handling",
                  "description": "Void Pointers, Pointer to Class, Pointer to Object, Void Pointer, Arrays. The keywords try, throw and catch. Creating own Exception Classes, Exception Handling Techniques (Terminate the Program, Fix the Error and Continue, Log the Error and Continue), Stack Unwinding.",
                  "lectures": 11
                }
              ],
              "questions": [
                {
                  "questionId": "it_100313_2019_Q1a",
                  "year": 2019,
                  "qNumber": "Q1a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Which feature allows open recursion among the following?\n(i) Use of this pointer\n(ii) Use of pointers\n(iii) Use of pass by value\n(iv) Use of parameterized constructor",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1b",
                  "year": 2019,
                  "qNumber": "Q1b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "If same message is passed to objects of several different classes and all of those can respond in a different way, what is this feature called?\n(i) Inheritance\n(ii) Overloading\n(iii) Polymorphism\n(iv) Overriding",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1c",
                  "year": 2019,
                  "qNumber": "Q1c",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Which among the following is wrong?\n(i) class student{}; student s;\n(ii) abstract class student{}; student s;\n(iii) abstract class student{} s[50000000];\n(iv) abstract class student{}; class toppers: public student{ }; topper t;",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1d",
                  "year": 2019,
                  "qNumber": "Q1d",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "If two classes combine some private data members and provides public member functions to access and manipulate those data members, where is abstraction used?\n(i) Using private access specifier for data members\n(ii) Using class concept with both data members and member functions\n(iii) Using public member functions to access and manipulate the data members\n(iv) Data is not sufficient to decide what is being used",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1e",
                  "year": 2019,
                  "qNumber": "Q1e",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Which class/set of classes can illustrate polymorphism in the following code\n```cpp\nabstract class student? {\npublic: int marks;\n  calc_grade();\n};\nclass topper: public student {\npublic: calc_grade() { return 10; }\n};\nclass average: public student {\npublic: calc_grade() { return 20; }\n};\nclass failed{int marks;};\n```\n(i) Only class student can show polymorphism\n(ii) Only class student and topper together can show polymorphism\n(iii) All class students, topper and average together can show polymorphism\n(iv) Class failed should also inherit class student for this code to work for polymorphism",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1f",
                  "year": 2019,
                  "qNumber": "Q1f",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Consider the following code and select the correct option:\n```cpp\nclass student {\n  int marks;\npublic:\n  int* fun() {\n    return & marks;\n  }\n};\nmain() {\n  student s;\n  int *ptr = s. fun(); \n  return 0;\n}\n```\n(i) This code is good to go\n(ii) This code may result in undesirable conditions\n(iii) This code will generate error\n(iv) This code violates encapsulation",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1g",
                  "year": 2019,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Which among the following is correct for the class defined below?\n```cpp\nclass student {\n  int marks;\npublic:\n  student() {}\n  student(int x) { marks = x; }\n};\nmain() {\n  student s1(100);\n  student s2(); \n  student s3 = 100; \n  return 0;\n}\n```\n(i) Object s3, syntax error\n(ii) Only object s1 and s2 will be created\n(iii) Program runs and all objects are created\n(iv) Program will give compile-time error",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1h",
                  "year": 2019,
                  "qNumber": "Q1h",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Does constructor overloading include different return types for constructors to be overloaded?\n(i) Yes, if return types are different, signature becomes different\n(ii) Yes, because return types can differentiate two functions\n(iii) No, return type can't differentiate two functions\n(iv) No, constructors doesn't have any return type",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1i",
                  "year": 2019,
                  "qNumber": "Q1i",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Which constructor will be called from the object created in the code below?\n```cpp\nclass A {\n  int i;\npublic:\n  A() {\n    i=0; cout << i;\n  }\n  A(int x = 0) {\n    i = x; cout << i;\n  }\n};\nA obj1;\n```\n(i) Default constructor\n(ii) Parameterized constructor\n(iii) Compile-time error\n(iv) Run-time error",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q1j",
                  "year": 2019,
                  "qNumber": "Q1j",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "When an object is passed to a function, its copy is made in the function and then\n(i) the destructor of the copy is called when function is returned\n(ii) the destructor is never called in this case\n(iii) the destructor is called but it is always implicit\n(iv) the destructor must be user defined",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2019_Q2a",
                  "year": 2019,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "What is Object-oriented Programming (OOP)? Write the basic concepts of OOP.",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q2b",
                  "year": 2019,
                  "qNumber": "Q2b",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What do you mean by class and object?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q3a",
                  "year": 2019,
                  "qNumber": "Q3a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "With an example, explain the terms 'constructor' and 'destructor'.",
                  "type": "Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q3b",
                  "year": 2019,
                  "qNumber": "Q3b",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "With an example, explain what virtual function is.",
                  "type": "Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q4a",
                  "year": 2019,
                  "qNumber": "Q4a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What do you mean by polymorphism?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q4b",
                  "year": 2019,
                  "qNumber": "Q4b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "With an example, differentiate between run-time and compile-time polymorphism.",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q5a",
                  "year": 2019,
                  "qNumber": "Q5a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What is friend function?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q5b",
                  "year": 2019,
                  "qNumber": "Q5b",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "What is pure virtual function?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q6a",
                  "year": 2019,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is abstract class? Write a program to illustrate. Also outline the advantages of abstract class.",
                  "type": "Explanation with Code & Advantages",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q6b",
                  "year": 2019,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Differentiate between abstract class and interface.",
                  "type": "Differentiate",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q7",
                  "year": 2019,
                  "qNumber": "Q7",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What are various types of inheritance, shown in the following figure? ![Image shows Single, Multiple, Hierarchical Inheritance diagrams](https://mtjwwpxkwpaagqsnfbks.supabase.co/storage/v1/object/public/images//it_100313_2019_Q7.png)",
                  "type": "Explanation with Diagram",
                  "marks": 14
                },
                {
                  "questionId": "it_100313_2019_Q8a",
                  "year": 2019,
                  "qNumber": "Q8a",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "What is an exception? What do you mean by exception handling?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q8b",
                  "year": 2019,
                  "qNumber": "Q8b",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Explain the keywords: try, catch and throw.",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q9a",
                  "year": 2019,
                  "qNumber": "Q9a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "With the help of an example program, differentiate between the following: Overloading vs. Overriding",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2019_Q9b",
                  "year": 2019,
                  "qNumber": "Q9b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "With the help of an example program, differentiate between the following: Early binding vs. Late binding",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q1a",
                  "year": 2020,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "Write the name of the function in C++ used for opening a file for input only.",
                  "type": "Short Answer",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1b",
                  "year": 2020,
                  "qNumber": "Q1b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is the purpose of using a derived class?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1c",
                  "year": 2020,
                  "qNumber": "Q1c",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Is there any difference between public protection and private protection?",
                  "type": "Comparison",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1d",
                  "year": 2020,
                  "qNumber": "Q1d",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "How does abstract class differ from interface?",
                  "type": "Differentiate",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1e",
                  "year": 2020,
                  "qNumber": "Q1e",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "What is the role of catch block in the exception handling?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1f",
                  "year": 2020,
                  "qNumber": "Q1f",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "Is it possible to return more than one value from a function? Explain with a small example.",
                  "type": "Explanation with Example",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1g",
                  "year": 2020,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What are the mutator functions? Give an example.",
                  "type": "Explanation with Example",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1h",
                  "year": 2020,
                  "qNumber": "Q1h",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Discuss the role of default constructor when an object of a class is created.",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1i",
                  "year": 2020,
                  "qNumber": "Q1i",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Write a small code which illustrates the concept of multiple inheritance.",
                  "type": "Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q1j",
                  "year": 2020,
                  "qNumber": "Q1j",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Differentiate between compile-time polymorphism and run-time polymorphism.",
                  "type": "Differentiate",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2020_Q2a",
                  "year": 2020,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "Write a language program in C++ which accepts the user's first and last name and print them in reverse order with a space between them.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q2b",
                  "year": 2020,
                  "qNumber": "Q2b",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "Create the equivalent of a four-function calculator. The program should ask the user to enter a number, an operator and another number. (Use floating point.) It should then carry out the specified arithmetical operation : adding, subtracting, multiplying or dividing the two numbers. Use a switch statement to select the operation. Finally, display the result. When it finishes the calculation, the program should ask whether the user wants to do another calculation. The response can be 'y' or 'n'.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q3a",
                  "year": 2020,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Use a single-subscripted array to solve the following problem : Read in 20 numbers, each of which is between 10 and 100, inclusive. As each number is read, print it only if it is not a duplicate of a number already read. Provide for the 'worst case' in which all 20 numbers are different. Use the smallest possible array to solve this problem.",
                  "type": "Problem/Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q3b",
                  "year": 2020,
                  "qNumber": "Q3b",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Write a program in C++ to read text file and display count of character in file.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q4a",
                  "year": 2020,
                  "qNumber": "Q4a",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "What is the main advantage of passing arguments by reference? When do we need to use default arguments in a function?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q4b",
                  "year": 2020,
                  "qNumber": "Q4b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What do you mean by dynamic binding? How is it useful in OOP?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q5a",
                  "year": 2020,
                  "qNumber": "Q5a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What is constructor? Write a program in C++ to find the area of the circle using constructor.",
                  "type": "Explanation & Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q5b",
                  "year": 2020,
                  "qNumber": "Q5b",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Define a class to represent a bank account. Include the following members:\nData members:\n1. Name of the depositor\n2. Account number\n3. Type of account\n4. Balance amount in the account\n\nMember functions:\n1. To assign initial values\n2. To deposit an amount\n3. To withdraw an amount after checking the balance\n4. To display name and balance\nWrite a main program which handles 10 customers.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q6a",
                  "year": 2020,
                  "qNumber": "Q6a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What do you mean by dynamic initialization of objects? Why do we need to do this? How is dynamic initialization of objects achieved?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q6b",
                  "year": 2020,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Write a C++ program to define a class string and use overloaded == operator to compare two strings.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q7a",
                  "year": 2020,
                  "qNumber": "Q7a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Some programmers prefer not to use protected access because it breaks the encapsulation of the base class. Discuss the relative merits of using protected access vs. insisting on using private access in base classes.",
                  "type": "Discussion",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q7b",
                  "year": 2020,
                  "qNumber": "Q7b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Write a C++ program to demonstrate example of hierarchical inheritance to get square and cube of a number.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q8a",
                  "year": 2020,
                  "qNumber": "Q8a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "We knew that a private member of a base class is not inheritable. Is it anyway possible for the objects of a derived class to access the private members of the base class? If yes, how?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q8b",
                  "year": 2020,
                  "qNumber": "Q8b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Write a program that uses a function template called max to determine the largest of three arguments. Test the program using integer, character and floating-point number pairs.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q9a",
                  "year": 2020,
                  "qNumber": "Q9a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Describe the relationship between class templates and inheritance. Why is it appropriate to call a class template a parameterized type?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2020_Q9b",
                  "year": 2020,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Write a program that demonstrates how certain exception types are not allowed to be thrown.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100313_2021_Q1a",
                  "year": 2021,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "How will you take input in C++?",
                  "type": "Short Answer",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1b",
                  "year": 2021,
                  "qNumber": "Q1b",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "How will you define a constructor in a C++ class?",
                  "type": "Short Answer",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1c",
                  "year": 2021,
                  "qNumber": "Q1c",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What are accessor and mutator functions?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1d",
                  "year": 2021,
                  "qNumber": "Q1d",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "What is void pointer in C++? Elaborate with an example.",
                  "type": "Explanation with Example",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1e",
                  "year": 2021,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "What is derived data type in C++?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1f",
                  "year": 2021,
                  "qNumber": "Q1f",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "How will you implement runtime polymorphism in C++?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1g",
                  "year": 2021,
                  "qNumber": "Q1g",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "When are virtual base classes necessary in C++?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1h",
                  "year": 2021,
                  "qNumber": "Q1h",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What are the differences between function overloading and function overriding?",
                  "type": "Differentiate",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1i",
                  "year": 2021,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "How will you throw an exception in C++? Elaborate with an example.",
                  "type": "Explanation with Example",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q1j",
                  "year": 2021,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Name two standard exceptions built in C++. When are they thrown?",
                  "type": "Short Answer",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q2a",
                  "year": 2021,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "What are the advantages of object-oriented programming paradigm over procedural programming? Demonstrate the features of an object-oriented programming paradigm with their suitable implementations in C++.",
                  "type": "Comparison & Explanation with Code",
                  "marks": 6
                },
                {
                  "questionId": "it_100313_2021_Q2b",
                  "year": 2021,
                  "qNumber": "Q2b",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "How will you define constants in C++? How will you access them? Elaborate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q2c",
                  "year": 2021,
                  "qNumber": "Q2c",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "What is type modifier? Elaborate different types of modifiers in C++ with proper examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q2d",
                  "year": 2021,
                  "qNumber": "Q2d",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Is it possible to have virtual constructor in C++? If yes, how will you implement it, and if no, why?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q3a",
                  "year": 2021,
                  "qNumber": "Q3a",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "What do you mean by call by reference? What are the differences between call by value and call by reference? Show call by reference by implementing a function to swap the values of two numbers.",
                  "type": "Explanation & Code",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q3b",
                  "year": 2021,
                  "qNumber": "Q3b",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "What do you mean by default arguments? Can you use functions with default arguments as an alternative to function overloading? Elaborate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q3c",
                  "year": 2021,
                  "qNumber": "Q3c",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What is a copy constructor? When will you need a copy constructor? How will you implement a copy constructor? Elaborate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q4a",
                  "year": 2021,
                  "qNumber": "Q4a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What is 'this' pointer? How will you use 'this' pointer in C++? Elaborate with example.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q4b",
                  "year": 2021,
                  "qNumber": "Q4b",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What are various access specifiers used in C++? Demonstrate each of them with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q4c",
                  "year": 2021,
                  "qNumber": "Q4c",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "How will you allocate dynamic memory in C++ other than malloc or calloc? How will you free the memory created using the method demonstrated? Demonstrate with suitable examples. What are the differences between malloc and the method you demonstrated?",
                  "type": "Explanation with Example & Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q5a",
                  "year": 2021,
                  "qNumber": "Q5a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "How do you overload operators in C++? Demonstrate with a suitable example, in which one unary operator and one binary operator will be overloaded.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q5b",
                  "year": 2021,
                  "qNumber": "Q5b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "How will you overload the input operator >> and the output operator <<? Demonstrate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q5c",
                  "year": 2021,
                  "qNumber": "Q5c",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Demonstrate friend function and friend class with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q5d",
                  "year": 2021,
                  "qNumber": "Q5d",
                  "chapter": "Module 1: Introduction to C++",
                  "text": "What is namespace? How will you define a namespace in C++?",
                  "type": "Explanation",
                  "marks": 2
                },
                {
                  "questionId": "it_100313_2021_Q6a",
                  "year": 2021,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is virtual function? Why are they necessary? Demonstrate compile-time binding and late-time binding using suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q6b",
                  "year": 2021,
                  "qNumber": "Q6b",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "What is inline function? How do you declare and invoke an inline function in C++?",
                  "type": "Explanation",
                  "marks": 3
                },
                {
                  "questionId": "it_100313_2021_Q6c",
                  "year": 2021,
                  "qNumber": "Q6c",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is pure virtual function? Elaborate pure virtual function and abstract class with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 6
                },
                {
                  "questionId": "it_100313_2021_Q7a",
                  "year": 2021,
                  "qNumber": "Q7a",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "How will you declare a dynamic array in C++? Demonstrate. What is 'nothrow' keyword used for?",
                  "type": "Explanation & Code",
                  "marks": 3
                },
                {
                  "questionId": "it_100313_2021_Q7b",
                  "year": 2021,
                  "qNumber": "Q7b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Can you overload new and delete operators? If yes, demonstrate with a suitable example. If not, why?",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q7c",
                  "year": 2021,
                  "qNumber": "Q7c",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "What is a reference? What are the differences between a pointer and a reference? Demonstrate with a suitable example of object pointer and object reference.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q7d",
                  "year": 2021,
                  "qNumber": "Q7d",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is diamond problem faced in multiple inheritance? How to deal with this problem in C++? Demonstrate with an example.",
                  "type": "Explanation with Example",
                  "marks": 3
                },
                {
                  "questionId": "it_100313_2021_Q8a",
                  "year": 2021,
                  "qNumber": "Q8a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is template? In which scenario, using templates are advantageous? Demonstrate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 3
                },
                {
                  "questionId": "it_100313_2021_Q8b",
                  "year": 2021,
                  "qNumber": "Q8b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "How will you declare a function template? Demonstrate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q8c",
                  "year": 2021,
                  "qNumber": "Q8c",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "How will you declare a class template? Demonstrate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                },
                {
                  "questionId": "it_100313_2021_Q8d",
                  "year": 2021,
                  "qNumber": "Q8d",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "How can you handle any type of exception in catch block in C++? Demonstrate with an example.",
                  "type": "Explanation with Example",
                  "marks": 3
                },
                {
                  "questionId": "it_100313_2021_Q9a",
                  "year": 2021,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "How will you create your own exception class in C++? Demonstrate. What is the functionality of what() function in creating own exception class?",
                  "type": "Explanation & Code",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q9b",
                  "year": 2021,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "How does stack unwinding work in C++? Demonstrate with a suitable example.",
                  "type": "Explanation with Example",
                  "marks": 5
                },
                {
                  "questionId": "it_100313_2021_Q9c",
                  "year": 2021,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Demonstrate nested try blocks in C++ with suitable example. Can an exception thrown by internal try block be caught by external catch clause? Can an exception thrown by external try block be caught by internal catch clause? In both cases, demonstrate with suitable examples.",
                  "type": "Explanation with Example",
                  "marks": 4
                }
              ]
            },
            {
              "id": "it_100305",
              "name": "DIGITAL ELECTRONICS",
              "code": "100305",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_100311",
              "name": "MATHEMATICS-III (DIFFERENTIAL CALCULUS)",
              "code": "100311",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_100314",
              "name": "TECHNICAL WRITING",
              "code": "100314",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_106301",
              "name": "DISCRETE MATHEMATICS",
              "code": "106301",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "ce",
      "name": "CIVIL ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "bridge"
      },
      "semesters": [
        {
          "id": "ce_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "ce_100301",
              "name": "BIOLOGY FOR ENGINEERS",
              "code": "100301",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_100312",
              "name": "MATHEMATICS-III (PDE, PROBABILILTY AND STATISTICS)",
              "code": "100312",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101302",
              "name": "BASIC ELECTRONICS",
              "code": "101302",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101303",
              "name": "COMPUTER AIDED CIVIL ENGINEERING DRAWING",
              "code": "101303",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101304",
              "name": "ENGINEERING MECHANICS",
              "code": "101304",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101305",
              "name": "HUMANITIES-I(EFFECTIVE TECHNICAL COMMUNICATION)",
              "code": "101305",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101306",
              "name": "INTRODUCTION TO CIVIL ENGINEERING",
              "code": "101306",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101308",
              "name": "SURVEYING & GEOMATICS",
              "code": "101308",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "me",
      "name": "MECHANICAL ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "cogs"
      },
      "semesters": [
        {
          "id": "me_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "me_100301",
              "name": "BIOLOGY FOR ENGINEERS",
              "code": "100301",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_100303",
              "name": "BASIC ELECTRONICS ENGINEERING",
              "code": "100303",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_100309",
              "name": "ENGINEERING MECHANICS",
              "code": "100309",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_100312",
              "name": "MATHEMATICS-III (PDE, PROBABILILTY AND STATISTICS)",
              "code": "100312",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_102304",
              "name": "THERMODYNAMICS",
              "code": "102304",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "ee",
      "name": "ELECTRICAL ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "flash"
      },
      "semesters": [
        {
          "id": "ee_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "ee_100302",
              "name": "ANALOG ELECTRONIC CIRCUITS",
              "code": "100302",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100306",
              "name": "ELECTRICAL CIRCUIT ANALYSIS",
              "code": "100306",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100307",
              "name": "ELECTRICAL MACHINES - I",
              "code": "100307",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100308",
              "name": "ELECTROMAGNETIC FIELDS",
              "code": "100308",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100310",
              "name": "ENGINEERING MECHANICS",
              "code": "100310",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "ece",
      "name": "ELECTRONICS & COMMUNICATION ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "cellphone-wireless"
      },
      "semesters": [
        {
          "id": "ece_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "ece_100313",
              "name": "OBJECT ORIENTED PROGRAMMING USING C++",
              "code": "100313",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104301",
              "name": "BASIC ELECTRONICS",
              "code": "104301",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104302",
              "name": "ELECTRICAL & ELECTRONIC MATERIAL",
              "code": "104302",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104303",
              "name": "MATHEMATICS-III",
              "code": "104303",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104304",
              "name": "NETWORK THEORY",
              "code": "104304",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104305",
              "name": "SIGNALS AND SYSTEMS",
              "code": "104305",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "cse",
      "name": "COMPUTER SCIENCE & ENGINEERING",
      "icon": {
        "set": "Ionicons",
        "name": "code-slash-outline"
      },
      "semesters": [
        {
          "id": "cse_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "cse_100302",
              "name": "ANALOG ELECTRONIC CIRCUITS",
              "code": "100302",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100304",
              "name": "DATA STRUCTURE & ALGORITHMS",
              "code": "100304",
              "modules": [
                {
                  "id": "m1",
                  "name": "Module 1: Introduction & Analysis",
                  "description": "Basic Terminologies: Elementary Data Organizations, Data Structure Operations: insertion, deletion, traversal etc.; Analysis of an Algorithm, Asymptotic Notations, Time-Space trade off.",
                  "lectures": 4
                },
                {
                  "id": "m2",
                  "name": "Module 2: Stacks and Queues",
                  "description": "ADT Stack and its operations: Algorithms and their complexity analysis, Applications of Stacks: Expression Conversion and evaluation – corresponding algorithms and complexity analysis. ADT queue, Types of Queue: Simple Queue, Circular Queue, Priority Queue; Operations on each Type of Queues: Algorithms and their analysis.",
                  "lectures": 10
                },
                {
                  "id": "m3",
                  "name": "Module 3: Linked Lists",
                  "description": "Singly linked lists: Representation in memory, Algorithms of several operations: Traversing, Searching, Insertion into, Deletion from linked list; Linked representation of Stack and Queue, Header nodes, doubly linked list: operations on it and algorithmic analysis; Circular Linked Lists: all operations their algorithms and the complexity analysis.",
                  "lectures": 6
                },
                {
                  "id": "m4",
                  "name": "Module 4: Searching, Sorting and Hashing",
                  "description": "Linear Search and Binary Search Techniques and their complexity analysis Objective and properties of different sorting algorithms: Selection Sort, Bubble Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort; Performance and Comparison among all the methods, Hashing.",
                  "lectures": 12
                },
                {
                  "id": "m5",
                  "name": "Module 5: Trees and Graphs",
                  "description": "Trees: Basic Tree Terminologies, Different types of Trees: Binary Tree, Threaded Binary Tree, Binary Search Tree, AVL Tree; Tree operations on each of the trees and their algorithms with complexity analysis. Applications of Binary Trees. B Tree, B+ Tree: definitions, algorithms and analysis. Graph: Basic Terminologies and Representations, Graph search and traversal algorithms and complexity analysis.",
                  "lectures": 8
                }
              ],
              "questions": [
                {
                  "questionId": "cse_100304_2019_Q1a",
                  "year": 2019,
                  "qNumber": "Q1a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Which of the following points is/are true about linked list data structure when it is compared with array?\n\n(i) Arrays have better cache locality that can make them better in terms of performance.\n(ii) It is easy to insert and delete elements in linked list.\n(iii) The size of array has to be pre-decided, linked lists can change their size any time.\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1b",
                  "year": 2019,
                  "qNumber": "Q1b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the functionality of the following code?\n```java\npublic void function (Node node) {\n  if(size == 0)\n    head = node;\n  else{\n    Node temp, cur;\n    for(cur = head;\n        (temp = cur.getNext())! = null; cur = temp);\n    cur.setNext(node);\n  }\n  size++;\n}\n```\n(i) Inserting a node at the beginning of the list\n(ii) Deleting a node at the beginning of the list\n(iii) Inserting a node at the end of the list\n(iv) Deleting a node at the end of the list",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1c",
                  "year": 2019,
                  "qNumber": "Q1c",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the space complexity for deleting a linked list?\n\n(i) O(1)\n(ii) O(n)\n(iii) Either O(1) or O(n)\n(iv) O(log n)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1d",
                  "year": 2019,
                  "qNumber": "Q1d",
                  "chapter": "Module 3: Linked Lists",
                  "text": "The situation when in a linked list START=NULL is\n\n(i) underflow\n(ii) overflow\n(iii) housefull\n(iv) saturated",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1e",
                  "year": 2019,
                  "qNumber": "Q1e",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\n\n(i) O(1)\n(ii) O(n)\n(iii) θ(n)\n(iv) θ(1)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1f",
                  "year": 2019,
                  "qNumber": "Q1f",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What kind of linked list is best to answer question like \"What is the item at position n\"?\n\n(i) Singly linked list\n(ii) Doubly linked list\n(iii) Circular linked list\n(iv) Array implementation of linked list",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1g",
                  "year": 2019,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Linked Lists",
                  "text": "A variation of linked list is circular linked list, in which the last node in the list points to first node of the list. One problem with this type of list is\n\n(i) it waste memory space since the pointer head already points to the first node and thus the list node does not need to point to the first node\n(ii) it is not possible to add a node at the end of the list\n(iii) it is difficult to traverse the list as the pointer of the last node is now not NULL\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1h",
                  "year": 2019,
                  "qNumber": "Q1h",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Each node in a linked list must contain at least\n\n(i) three fields\n(ii) two fields\n(iii) four fields\n(iv) five fields",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1i",
                  "year": 2019,
                  "qNumber": "Q1i",
                  "chapter": "Module 3: Linked Lists",
                  "text": "A linear list in which the last node points to the first node is\n\n(i) singly linked list\n(ii) circular linked list\n(iii) doubly linked list\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q1j",
                  "year": 2019,
                  "qNumber": "Q1j",
                  "chapter": "Module 3: Linked Lists",
                  "text": "In a linked list, insertion can be done as\n\n(i) beginning\n(ii) end\n(iii) middle\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2019_Q2",
                  "year": 2019,
                  "qNumber": "Q2",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "What is a Hash Table, and what is the average case and worst-case time for each of its operations? How can we use this structure to find all anagrams in a dictionary?",
                  "type": "Explanation & Application",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2019_Q3",
                  "year": 2019,
                  "qNumber": "Q3",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Describe insertion in max heap tree with example from the following list of numbers: 33, 42, 67, 23, 44, 49, 74",
                  "type": "Explanation with Example",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2019_Q4",
                  "year": 2019,
                  "qNumber": "Q4",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Sort the given values using quicksort and write time complexity of algorithm: 65, 70, 75, 80, 85, 60, 55, 50, 45",
                  "type": "Algorithm Application & Analysis",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2019_Q5a",
                  "year": 2019,
                  "qNumber": "Q5a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following sequence of elements into an AVL tree, starting with an empty tree : 10, 20, 15, 25, 30, 16, 18, 19",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2019_Q5b",
                  "year": 2019,
                  "qNumber": "Q5b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Delete 30 in the AVL tree that you got.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2019_Q6a",
                  "year": 2019,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write algorithm for quicksort and mention time and space complexity in each case.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2019_Q6b",
                  "year": 2019,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Define collision in hashing. What are the different methodologies to resolve collision? Explain briefly.",
                  "type": "Definition & Explanation",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2019_Q7",
                  "year": 2019,
                  "qNumber": "Q7",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Construct binary search tree and write pre- and post-order traversals of this tree. 8, 3, 1, 10, 6, 14, 4, 7, 13, 22, 5",
                  "type": "Problem & Traversal",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2019_Q8a",
                  "year": 2019,
                  "qNumber": "Q8a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write algorithm to count leaf node in binary tree and check whether tree is balanced or not.",
                  "type": "Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2019_Q8b",
                  "year": 2019,
                  "qNumber": "Q8b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write a recursive and iterative version of insertion sort algorithm and mention time complexity.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2019_Q9a",
                  "year": 2019,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: BFS",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2019_Q9b",
                  "year": 2019,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: DFS",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2019_Q9c",
                  "year": 2019,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Binary search tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2019_Q9d",
                  "year": 2019,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Balance factor",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2020_Q1a",
                  "year": 2020,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following is time complexity of the given code?\n```cpp\nint a = 0;\nfor (i = 0; i<N; i++) {\n  for (j = N; j>i; j--){\n    a = a + i + j;\n  }\n}\n```\n(i) O(N)\n(ii) O(N*log(N))\n(iii) O(N*Sqrt(N))\n(iv) O(N*N)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1b",
                  "year": 2020,
                  "qNumber": "Q1b",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following is time complexity of the given code?\n```cpp\nint i, j, k = 0;\nfor (i = n/2; i<= n; i++) {\n  for (j = 2; j<= n; j = j*2) {\n    k = k + n/2;\n  }\n}\n```\n(i) O(N)\n(ii) O(N*log(N))\n(iii) O(N*Sqrt(N))\n(iv) O(N*N)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1c",
                  "year": 2020,
                  "qNumber": "Q1c",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following cases does not exist in complexity theory?\n\n(i) Best case\n(ii) Worst case\n(iii) Average case\n(iv) Null case",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1d",
                  "year": 2020,
                  "qNumber": "Q1d",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "The operation of processing each element in the list is known as\n\n(i) sorting\n(ii) merging\n(iii) inserting\n(iv) traversal",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1e",
                  "year": 2020,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Arrays are best data structures\n\n(i) for relatively permanent collections of data\n(ii) for the size of the structure and the data in the structure are constantly changing\n(iii) Both (i) and (ii)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1f",
                  "year": 2020,
                  "qNumber": "Q1f",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Each array declaration needs not give, implicitly or explicitly the information about\n\n(i) the name of array\n(ii) the data type of array\n(iii) the first data from the set to be stored\n(iv) the index set of the array",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1g",
                  "year": 2020,
                  "qNumber": "Q1g",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "In general, the binary search method needs not more than ______ comparisons.\n\n(i) [log2 n]-1\n(ii) [log2 n]+1\n(iii) [log2 n]\n(iv) [log2 n]+1",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1h",
                  "year": 2020,
                  "qNumber": "Q1h",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "State True or False :\nA. Binary search is used for searching in a sorted array.\nB. The time complexity of binary search is O(log n).\n\n(i) True, False\n(ii) False, True\n(iii) False, False\n(iv) True, True",
                  "type": "MCQ_TrueFalse",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1i",
                  "year": 2020,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which of the following is non-linear data structure?\n\n(i) Stack\n(ii) Linked list\n(iii) String\n(iv) Tree",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q1j",
                  "year": 2020,
                  "qNumber": "Q1j",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which is the correct output for the following sequence of operations?\npush(5)\npush(8)\npop\npush(2)\npush(5)\npop\npop\npop\npush(1)\npop\n\n(i) 8 5 2 5 1\n(ii) 8 5 5 2 1\n(iii) 8 2 5 5 1\n(iv) 8 1 2 5 5",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2020_Q2",
                  "year": 2020,
                  "qNumber": "Q2",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Analyse the time complexity of the given function and also write the recurrence relation of the function :\n```cpp\nint DoSomething (int n)\n{\n  if (n<= 2)\n    return 1;\n  else\n    return (DoSomething (floor(sqrt(n)))+n);\n}\n```",
                  "type": "Analysis & RecurrenceRelation",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2020_Q3",
                  "year": 2020,
                  "qNumber": "Q3",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Consider the following postfix expression : 8 7 3 - / 6 2 5 4 + * + -\nThe above expression is evaluated using stack. Show the content of stack after each step.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2020_Q4",
                  "year": 2020,
                  "qNumber": "Q4",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "What are the different notations for comparing the time complexity of an algorithm? Explain each of them with neat figures.",
                  "type": "Explanation with Diagram",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2020_Q5",
                  "year": 2020,
                  "qNumber": "Q5",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Explain the queue and circular queue with examples. Also, write the differences between the two.",
                  "type": "Explanation with Example & Differentiate",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2020_Q6",
                  "year": 2020,
                  "qNumber": "Q6",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Let a and b be positive integers. Suppose a function F is defined recursively as follows:\nF(a, b) = { 0 if a<b; F(a-b, b)+1 if b<=a }\nFind the values of the following :\n(a) F(2, 3)\n(b) F(14, 3)",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2020_Q7a",
                  "year": 2020,
                  "qNumber": "Q7a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write the algorithm of prefix evaluation with example.",
                  "type": "Algorithm with Example",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2020_Q7b",
                  "year": 2020,
                  "qNumber": "Q7b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write prefix notation of the following infix notation : A+B*C+D",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2020_Q8",
                  "year": 2020,
                  "qNumber": "Q8",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What do you mean by ADT? Explain the ADT stack with test cases for both pop and push.",
                  "type": "Definition & Explanation",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2020_Q9a",
                  "year": 2020,
                  "qNumber": "Q9a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write short notes on the following: Hashing",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2020_Q9b",
                  "year": 2020,
                  "qNumber": "Q9b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write short notes on the following: Circular linked list",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2020_Q9c",
                  "year": 2020,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Adjacency list",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2020_Q9d",
                  "year": 2020,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: AVL tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2021_Q1a",
                  "year": 2021,
                  "qNumber": "Q1a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "What is the worst case run-time complexity of binary search algorithm?\n\n(i) O(n^2)\n(ii) O(n^log n)\n(iii) O(n^3)\n(iv) O(n)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1b",
                  "year": 2021,
                  "qNumber": "Q1b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "push() and pop() functions are found in\n\n(i) queues\n(ii) list\n(iii) stacks\n(iv) trees",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1c",
                  "year": 2021,
                  "qNumber": "Q1c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Binary search tree has average case run-time complexity of O(log n). What could be the worst case?\n\n(i) O(n)\n(ii) O(n^2)\n(iii) O(n^3)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1d",
                  "year": 2021,
                  "qNumber": "Q1d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "What will be the running-time of Dijkstra's single-source shortest path algorithm, if the graph G(V, E) is stored in the form of adjacency list and binary heap is used?\n\n(i) O(|V|^2)\n(ii) O(|V|log|V|)\n(iii) O(|E|+|V|log|V|)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1e",
                  "year": 2021,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Tower of Hanoi is a classic example of\n\n(i) divide and conquer\n(ii) recursive approach\n(iii) (ii) but not (i)\n(iv) Both (i) and (ii)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1f",
                  "year": 2021,
                  "qNumber": "Q1f",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "If locality is a concern, you can use ___ to traverse the graph.\n\n(i) breadth-first search\n(ii) depth-first search\n(iii) either BFS or DFS\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1g",
                  "year": 2021,
                  "qNumber": "Q1g",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which data structure is used for balancing of symbols?\n\n(i) Queue\n(ii) Stack\n(iii) Tree\n(iv) Graph",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1h",
                  "year": 2021,
                  "qNumber": "Q1h",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which data structure is most efficient to find the top 10 largest items out of 1 million items stored in file?\n\n(i) Min heap\n(ii) Max heap\n(iii) Binary search tree\n(iv) AVL tree",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1i",
                  "year": 2021,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "A data structure is required for storing a set of integers such that each of the following operations can be done in (log n) time, where n is the number of elements in the set:\n\n* Deletion of the smallest element\n* Insertion of an element if it is not already present in the set\nWhich of the following can be used?\n\n(i) A heap can be used but not a balanced binary search tree\n(ii) A balanced binary search tree can be used but not a heap\n(iii) Both balanced binary search tree and heap can be used\n(iv) Neither balanced binary search tree nor heap can be used",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q1j",
                  "year": 2021,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The most appropriate matching for the following pairs is\nX. Depth-first search  1. Heap\nY. Breadth-first search 2. Queue\nZ. Sorting              3. Stack\n\n(i) X-1, Y-2, Z-3\n(ii) X-3, Y-1, Z-2\n(iii) X-3, Y-2, Z-1\n(iv) X-2, Y-3, Z-1",
                  "type": "MCQ_Matching",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q2a",
                  "year": 2021,
                  "qNumber": "Q2a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Josephus problem: A group of soldiers is surrounded by an overwhelming army. There is no hope of victory without reinforcements. There is only a single horse available for escape. The soldiers agree to a pact to determine which of them is to escape and summon help. They form a circle, and a number (n) and one of their names are picked from a hat. Beginning with the soldier whose name is picked, they begin to count clockwise around the circle. When the count reaches (n), that soldier is removed from the circle, and the count begins again with the next soldier. The eliminated soldier is no longer a part of the circle. The process continues until one soldier remains and takes the horse to summon help.\nSuppose n=3 and there are five soldiers who form a circle in the order A, B, C, D and E. Let the soldier to start with A, so C is eliminated first, then A gets eliminated second, then E at third, finally B gets eliminated. So D is the one who escapes with the horse.\nWrite a function in C which displays the names of every soldier in the order of their elimination and finally the name of the soldier left, using circular linked list. New list should not be created.",
                  "type": "Problem/Code",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2021_Q2b",
                  "year": 2021,
                  "qNumber": "Q2b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write a program in C to insert an element after an existing element in a doubly linked list.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2021_Q3a",
                  "year": 2021,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty AVL tree :\n 1, 26, 2, 25, 3, 24, 4, 23, 5\nDisplay the tree after every insertion. Also state the minimum number of nodes which are required to construct AVL tree of height 7 (note that the root is at level 0).",
                  "type": "Problem & Analysis",
                  "marks": 8
                },
                {
                  "questionId": "cse_100304_2021_Q3b",
                  "year": 2021,
                  "qNumber": "Q3b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Sort the following numbers in ascending order using heapsort. Show step-by-step analysis: 25, 57, 48, 37, 12, 92, 86, 33",
                  "type": "Algorithm Application",
                  "marks": 6
                },
                {
                  "questionId": "cse_100304_2021_Q4",
                  "year": 2021,
                  "qNumber": "Q4",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty B tree of order 5 and display the tree at every split :\n 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nNow delete the following elements from the tree, in the given sequence, and display the tree at every merge.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2021_Q5",
                  "year": 2021,
                  "qNumber": "Q5",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty B+ tree of order 3 and display the tree at every split : \n10, 20, 30, 90, 80, 60, 70, 40, 50, 66, 16, 84, 21, 76\nNow delete the following elements from the tree, in the given sequence, and display the tree at every merge.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2021_Q6a",
                  "year": 2021,
                  "qNumber": "Q6a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Construct the Huffman tree for data given in the table below :\nAlphabet | Frequency\n---------------------\nR | 5\nT | 6\nY | 2\nC | 16\nS | 3\nL | 60\nA | 8",
                  "type": "Problem",
                  "marks": 8
                },
                {
                  "questionId": "cse_100304_2021_Q6b",
                  "year": 2021,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Show at every step the contents of the hash table after inserting the keys in the order 23, 11, 4, 17, 84, 22, 33. The hash function is given as h(key) = key%11\nThe hash table has a space for 11 keys only. Resolve collision using-\n(i) linear probing;\n(ii) quadratic probing.",
                  "type": "Problem",
                  "marks": 6
                },
                {
                  "questionId": "cse_100304_2021_Q7a",
                  "year": 2021,
                  "qNumber": "Q7a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Differentiate between the following: Abstract Data Type and Data Structure",
                  "type": "Differentiate",
                  "marks": 4
                },
                {
                  "questionId": "cse_100304_2021_Q7b",
                  "year": 2021,
                  "qNumber": "Q7b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Differentiate between the following: Stack and Queue",
                  "type": "Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "cse_100304_2021_Q7c",
                  "year": 2021,
                  "qNumber": "Q7c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Differentiate between the following: Depth-first search and Breadth-first search",
                  "type": "Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "cse_100304_2021_Q8",
                  "year": 2021,
                  "qNumber": "Q8",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Explain in detail the Kruskal's and Prim's algorithms for constructing minimum spanning tree. For the weighted undirected graph given below, construct the minimum cost spanning tree for the given graph using Kruskal's algorithm and Prim's algorithm when the starting vertex is R1 :\n ![graph](https://mtjwwpxkwpaagqsnfbks.supabase.co/storage/v1/object/public/images//cse_100304_2021_Q8.png)",
                  "type": "Explanation & Problem",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2021_Q9a",
                  "year": 2021,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q9b",
                  "year": 2021,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q9c",
                  "year": 2021,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Strictly binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q9d",
                  "year": 2021,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Complete binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q9e",
                  "year": 2021,
                  "qNumber": "Q9e",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Full binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q9f",
                  "year": 2021,
                  "qNumber": "Q9f",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Min heap",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2021_Q9g",
                  "year": 2021,
                  "qNumber": "Q9g",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Skew tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1a",
                  "year": 2022,
                  "qNumber": "Q1a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "In a stack, if a user tries to remove an element from empty stack it is called:\n(i) underflow\n(ii) empty collection\n(iii) garbage collection\n(iv) overflow",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1b",
                  "year": 2022,
                  "qNumber": "Q1b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Consider the binary max-heap implemented using an array. Which one of the following array represents the heap:\n(i) 25, 12, 16, 13, 10, 8, 14\n(ii) 25, 12, 16, 13, 10, 8, 14\n(iii) 25, 14, 16, 13, 10, 8, 12\n(iv) 25, 14, 12, 13, 10, 8, 16",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1c",
                  "year": 2022,
                  "qNumber": "Q1c",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "A hash function is defined as h(key) = key mod 7, with linear probing used to insert keys 44, 45, 79, 55, 91, 18, 63 into a table indexed from 0 to 6. What will be the location of key 18.\n(i) 3\n(ii) 4\n(iii) 5\n(iv) 6",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1d",
                  "year": 2022,
                  "qNumber": "Q1d",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "If the number of values to be sorted is already partially sorted, then ______ sorting can be efficient.\n(i) merge\n(ii) insertion\n(iii) bubble\n(iv) selection",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1e",
                  "year": 2022,
                  "qNumber": "Q1e",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "The time complexity of merge sort is:\n(i) O(n)\n(ii) O(logn)\n(iii) O(nlogn)\n(iv) O(n2)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1f",
                  "year": 2022,
                  "qNumber": "Q1f",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "State true or false:\nA: Binary search is used for searching in a sorted array.\nB: The time complexity of binary search is O(logn)\n(i) True, False\n(ii) False, True\n(iii) False, False\n(iv) True, True",
                  "type": "MCQ_TrueFalse",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1g",
                  "year": 2022,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Linked Lists",
                  "text": "In a circular linked list organization, insertion of a record involves modification of\n(i) One pointer\n(ii) Two pointers\n(iii) More than two pointers\n(iv) No pointer",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1h",
                  "year": 2022,
                  "qNumber": "Q1h",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Level order traversal of a rooted tree can be done by starting from the root and performing\n(i) pre-order traversal\n(ii) in-order traversal\n(iii) depth first search\n(iv) breadth first search",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1i",
                  "year": 2022,
                  "qNumber": "Q1i",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "An Abstract Data Type (ADT) is\n(i) same as an abstract class\n(ii) a data type that cannot be instantiated\n(iii) a data type for which only the operations defined on it can be used, but none else\n(iv) all of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q1j",
                  "year": 2022,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "How many distinct BSTs can be constructed with 3 distinct keys?\n(i) 4\n(ii) 5\n(iii) 6\n(iv) 9",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2022_Q2a",
                  "year": 2022,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Explain different asymptotic notations (Big-O, Ω, Θ) used for comparing the time complexity of an algorithm with neat figures.",
                  "type": "Explanation with Diagram",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q2b",
                  "year": 2022,
                  "qNumber": "Q2b",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "The run time of an algorithm is represented by the recurrence relation T(n) = 2T(n/2) + n; n ≥ 2 and with boundary condition T(1) = 0. What is the time complexity (in terms of Θ notation).",
                  "type": "Problem/Analysis",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q3a",
                  "year": 2022,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Discuss pre-order, in-order and post-order traversal techniques of binary tree. Write a C function for non-recursive pre-order traversal.",
                  "type": "Explanation & Code",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q3b",
                  "year": 2022,
                  "qNumber": "Q3b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The pre-order traversal sequence of a Binary Search Tree (BST) is 30, 20, 10, 15, 25, 23, 39, 35, 42. Write step by step process to derive the BST and find post-order traversal also.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q4a",
                  "year": 2022,
                  "qNumber": "Q4a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Consider a circular queue of capacity n-elements implemented with an array. Write C functions for insertion and deletion operations.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q4b",
                  "year": 2022,
                  "qNumber": "Q4b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Convert the given infix expression into postfix using stack: A + B / C * (D + E) - F. For each input symbol clearly mention the action taken and status of the stack during conversion.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q5a",
                  "year": 2022,
                  "qNumber": "Q5a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write a C function to delete last node from a singly linked list.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q5b",
                  "year": 2022,
                  "qNumber": "Q5b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Create a max-heap by inserting following keys in the given order. Show each insertion step with clear illustration: 25, 35, 18, 9, 46, 70, 48.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q6a",
                  "year": 2022,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write an algorithm for merge sort and discuss space and time complexity.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q6b",
                  "year": 2022,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Define collision in hashing. Explain briefly different methodologies to resolve collision.",
                  "type": "Definition & Explanation",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q7a",
                  "year": 2022,
                  "qNumber": "Q7a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write algorithm to count leaf nodes in a binary tree. What is the complexity of your algorithm?",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q7b",
                  "year": 2022,
                  "qNumber": "Q7b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Compare BFS and DFS traversal techniques for graph. Write an algorithm to perform BFS using queue.",
                  "type": "Comparison & Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q8a",
                  "year": 2022,
                  "qNumber": "Q8a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Differentiate between system defined data types and abstract data types with suitable examples.",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q8b",
                  "year": 2022,
                  "qNumber": "Q8b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is doubly linked list? What are its applications? Explain how a node can be added as last node using appropriate pseudo code",
                  "type": "Explanation & Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q9a",
                  "year": 2022,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on any two of the following: AVL Rotations",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q9b",
                  "year": 2022,
                  "qNumber": "Q9b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write short notes on any two of the following: Open Addressing & Chaining",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q9c",
                  "year": 2022,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on any two of the following: B-Tree",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2022_Q9d",
                  "year": 2022,
                  "qNumber": "Q9d",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write short notes on any two of the following: Priority Queue",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q1a",
                  "year": 2023,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "What is the time complexity of the following code snippet?\n```cpp\nfor(i=0; i<n; i++){\n  for(j=0; j<i; j++){\n    int sum= i + j;\n  }\n}\n```\n(i) O(n)\n(ii) O(n^2)\n(iii) O(log n)\n(iv) O(1)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1b",
                  "year": 2023,
                  "qNumber": "Q1b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which type of traversal of binary search tree outputs the value in sorted order?\n(i) Pre-order\n(ii) In-order\n(iii) Post-order\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1c",
                  "year": 2023,
                  "qNumber": "Q1c",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Suppose a circular queue of capacity (n - 1) elements is implemented with an array of n elements. Assume that the insertion and deletion operations are carried out using REAR and FRONT as array index variables, respectively. Initially, REAR = FRONT = 0. The conditions to detect queue full and queue empty are\n(i) Full: FRONT == (REAR+1) mod n, Empty: REAR == FRONT\n(ii) Full: FRONT == (REAR+1) mod n, Empty: REAR == (FRONT+1) mod n\n(iii) Full: REAR == FRONT, Empty: FRONT == (REAR+1) mod n\n(iv) Full: REAR == (FRONT+1) mod n, Empty: REAR == FRONT",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1d",
                  "year": 2023,
                  "qNumber": "Q1d",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which of the following data structures can be used for parentheses matching?\n(i) Tree\n(ii) Queue\n(iii) Stack\n(iv) Priority queue",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1e",
                  "year": 2023,
                  "qNumber": "Q1e",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the worst-case time complexity of inserting n elements into an empty linked list, if the linked list needs to be maintained in sorted order?\n(i) Θ(n)\n(ii) Θ(nlog n)\n(iii) Θ(n^2)\n(iv) Θ(1)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1f",
                  "year": 2023,
                  "qNumber": "Q1f",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What will be the postfix expression for the given infix expression: (a+b)\\*c-d\n(i) -*+abcd\n(ii) ab+c\\*d-\n(iii) ab+cd-\\*\n(iv) abc\\*+d-",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1g",
                  "year": 2023,
                  "qNumber": "Q1g",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What is the outcome of the prefix expression +, -, *, 3, 2, /, 8, 4, 1?\n(i) 12\n(ii) 11\n(iii) 5\n(iv) 4",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1h",
                  "year": 2023,
                  "qNumber": "Q1h",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Where will the new element be inserted in the linked list implementation of the queue?\n(i) At the middle position of the linked list\n(ii) At the head position of the linked list\n(iii) At the tail position of the linked list\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1i",
                  "year": 2023,
                  "qNumber": "Q1i",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Let us consider a list of numbers (34, 16, 2, 93, 80, 77, 51) and a hash table size of 10. What is the order of elements (from index 0 to size-1) in the hash table?\n(i) null, null, 77, 16, null, 34, 93, 2, 51, 80\n(ii) 80, 51, 2, 93, 34, null, 16, 77, null, null\n(iii) 77, 16, 34, 93, 2, 51, 80\n(iv) 80, 51, 2, 93, 34, 16, 77",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q1j",
                  "year": 2023,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The height of a binary tree is the maximum number of edges in any root to leaf path. The maximum number of nodes in a binary tree of height h is:\n(i) 2^h - 1\n(ii) 2^(h-1) - 1\n(iii) 2^(h + 1) - 1\n(iv) 2h+1",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "cse_100304_2023_Q2a",
                  "year": 2023,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Why do we need an asymptotic notation? Explain the different asymptotic notations with definitions and examples.",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q2b",
                  "year": 2023,
                  "qNumber": "Q2b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write the worst-case run time complexity of the following algorithms: linear search, bubble sort, merge sort, and push operation in the stack.",
                  "type": "Analysis",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q3a",
                  "year": 2023,
                  "qNumber": "Q3a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write push() and pop() functions of a stack.",
                  "type": "Code",
                  "marks": 9
                },
                {
                  "questionId": "cse_100304_2023_Q3b",
                  "year": 2023,
                  "qNumber": "Q3b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Evaluate the following postfix expression using STACK. Show all the steps. 8, 2, /, 3, *, 4, -, 6, 2, /, +",
                  "type": "Problem",
                  "marks": 5
                },
                {
                  "questionId": "cse_100304_2023_Q4a",
                  "year": 2023,
                  "qNumber": "Q4a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write the algorithm to count the total elements in a singly linked list.",
                  "type": "Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q4b",
                  "year": 2023,
                  "qNumber": "Q4b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "How a doubly linked list is better than a singly linked list? Explain deletion operation on a doubly linked list using an example.",
                  "type": "Comparison & Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q5a",
                  "year": 2023,
                  "qNumber": "Q5a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "The following values are to be stored in a hash table:\n 25, 42, 96, 101, 102, 162, 197. Describe how the values are hashed by using the division method of hashing with a table size of 7. Use chaining as the method of collision resolution.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q5b",
                  "year": 2023,
                  "qNumber": "Q5b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Apply the merge sort on the following numbers. 10, 15, 50, 17, 20, 25, 30, 16, 70, 6.",
                  "type": "Algorithm Application",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q6a",
                  "year": 2023,
                  "qNumber": "Q6a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Differentiate between stack and queue. Explain different types of queues with examples.",
                  "type": "Differentiate & Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q6b",
                  "year": 2023,
                  "qNumber": "Q6b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the properties of a binary search tree. Create a binary search tree using the following elements:\n 45, 15, 79, 90, 10, 55, 12, 20, 50",
                  "type": "Explanation & Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q7a",
                  "year": 2023,
                  "qNumber": "Q7a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Consider the in-order and pre-order traversal of a binary search tree are (1, 2, 3, 4, 5, 6, 8, 10, 25) and (4, 3, 1, 2, 10, 8, 5, 6, 25) respectively. Construct a unique search tree for the given in-order and pre-order traversals.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q7b",
                  "year": 2023,
                  "qNumber": "Q7b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Explain the insertion in the AVL tree using an example.",
                  "type": "Explanation with Example",
                  "marks": 7
                },
                {
                  "questionId": "cse_100304_2023_Q8",
                  "year": 2023,
                  "qNumber": "Q8",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Explain the Heap sort algorithm. Create a heap for the following elements and then sort them.\n 13, 102, 405, 136, 15, 105, 390, 432, 28, 444",
                  "type": "Explanation & Algorithm Application",
                  "marks": 14
                },
                {
                  "questionId": "cse_100304_2023_Q9a",
                  "year": 2023,
                  "qNumber": "Q9a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write the short note on the following: Circular Queue",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2023_Q9b",
                  "year": 2023,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the short note on the following: Depth first search",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2023_Q9c",
                  "year": 2023,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the short note on the following: B tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "cse_100304_2023_Q9d",
                  "year": 2023,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write the short note on the following: Adjacency matrix",
                  "type": "Short Notes",
                  "marks": 3.5
                }
              ]
            },
            {
              "id": "cse_100311",
              "name": "MATHEMATICS-III (DIFFERENTIAL CALCULUS)",
              "code": "100311",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100313",
              "name": "OBJECT ORIENTED PROGRAMMING USING C++",
              "code": "100313",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100314",
              "name": "TECHNICAL WRITING",
              "code": "100314",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "lt",
      "name": "LEATHER TECHNOLOGY ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "shoe-print"
      },
      "semesters": [
        {
          "id": "lt_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "lt_100303",
              "name": "BASIC ELECTRONICS ENGINEERING",
              "code": "100303",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_100309",
              "name": "ENGINEERING MECHANICS",
              "code": "100309",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_100312",
              "name": "MATHEMATICS-III (PDE, PROBABILILTY AND STATISTICS)",
              "code": "100312",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_107301",
              "name": "PHYSICS(WAVES AND OPTICS)",
              "code": "107301",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_107302",
              "name": "INTRODUCTION TO LEATHER TECHNOLOGY",
              "code": "107302",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    }
  ]
}