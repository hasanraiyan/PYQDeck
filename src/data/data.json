{
  "branches": [
    {
      "id": "it",
      "name": "Information Technology",
      "semesters": [
        {
          "id": "sem3",
          "number": 3,
          "subjects": [
            {
              "id": "it301",
              "name": "Object-Oriented Programming Using C++",
              "code": "IT301",
              "questions": [
                {
                  "questionId": "it301_2019_1a",
                  "year": 2019,
                  "qNumber": "Q1a",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "Which feature allows open recursion among the following?\n\n*   (i) Use of `this` pointer\n*   (ii) Use of pointers\n*   (iii) Use of pass by value\n*   (iv) Use of parameterized constructor",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1b",
                  "year": 2019,
                  "qNumber": "Q1b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "If same message is passed to objects of several different classes and all of those can respond in a different way, what is this feature called?\n\n*   (i) Inheritance\n*   (ii) Overloading\n*   (iii) Polymorphism\n*   (iv) Overriding",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1c",
                  "year": 2019,
                  "qNumber": "Q1c",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Which among the following is wrong?\n\n*   (i) `class student{}; student s;`\n*   (ii) `abstract class student{}; student s;`\n*   (iii) `abstract class student{} s[50000000];`\n*   (iv) `abstract class student{}; class toppers: public student{ }; topper t;`",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1d",
                  "year": 2019,
                  "qNumber": "Q1d",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "If two classes combine some private data members and provides public member functions to access and manipulate those data members, where is abstraction used?\n\n*   (i) Using private access specifier for data members\n*   (ii) Using class concept with both data members and member functions\n*   (iii) Using public member functions to access and manipulate the data members\n*   (iv) Data is not sufficient to decide what is being used",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1e",
                  "year": 2019,
                  "qNumber": "Q1e",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Which class/set of classes can illustrate polymorphism in the following code?\n\n```cpp\nabstract class student\n{\n  public: int marks;\n  // Assuming virtual calc_grade() = 0; from context\n  calc_grade(); \n}\nclass topper: public student\n{\n  public: calc_grade() \n  { return 10; }\n};\nclass average: public student\n{\n  public: calc_grade() \n  { return 20; }\n};\nclass failed{ int marks; };\n```\n\n*   (i) Only class `student` can show polymorphism\n*   (ii) Only class `student` and `topper` together can show polymorphism\n*   (iii) All class `student`, `topper` and `average` together can show polymorphism\n*   (iv) Class `failed` should also inherit class `student` for this code to work for polymorphism",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1f",
                  "year": 2019,
                  "qNumber": "Q1f",
                   "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Consider the following code and select the correct option:\n\n```cpp\nclass student\n{\n  int marks;\n  public: int* fun()\n  { return &marks; }\n};\nmain()\n{\n  student s;\n  int *ptr = s.fun(); \n  return 0;\n}\n```\n\n*   (i) This code is good to go\n*   (ii) This code may result in undesirable conditions\n*   (iii) This code will generate error\n*   (iv) This code violates encapsulation",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1g",
                  "year": 2019,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Which among the following is correct for the class defined below?\n\n```cpp\nclass student\n{\n  int marks;\n  public: student() {}\n  student(int x)\n  { marks = x; }\n};\nmain()\n{\n  student s1(100);\n  student s2(); // This declares a function s2, not an object\n  // student s3 = 100; // Incorrect initialization\n  return 0;\n}\n```\n\n*   (i) Object `s3`, syntax error\n*   (ii) Only object `s1` and `s2` will be created (Note: `s2()` is a function declaration)\n*   (iii) Program runs and all objects are created\n*   (iv) Program will give compile-time error (related to `s3`, but `s2()` is also tricky)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1h",
                  "year": 2019,
                  "qNumber": "Q1h",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Does constructor overloading include different return types for constructors to be overloaded?\n\n*   (i) Yes, if return types are different, signature becomes different\n*   (ii) Yes, because return types can differentiate two functions\n*   (iii) No, return type can't differentiate two functions\n*   (iv) No, constructors doesn't have any return type",
                  "type": "MCQ",
                  "marks": 2
                },
                 {
                  "questionId": "it301_2019_1i",
                  "year": 2019,
                  "qNumber": "Q1i",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "Which constructor will be called from the object created in the code below?\n\n```cpp\nclass A\n{\n  int i;\n  public: \n  A()\n  { i=0; /* cout << i; */ }\n  A(int x=0) \n  { i=x; /* cout << i; */ }\n};\nA obj1;\n```\n\n*   (i) Default constructor\n*   (ii) Parameterized constructor\n*   (iii) Compile-time error (Ambiguity between A() and A(int=0))\n*   (iv) Run-time error",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_1j",
                  "year": 2019,
                  "qNumber": "Q1j",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "When an object is passed to a function, its copy is made in the function and then\n\n*   (i) the destructor of the copy is called when function is returned\n*   (ii) the destructor is never called in this case\n*   (iii) the destructor is called but it is always implicit\n*   (iv) the destructor must be user defined",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it301_2019_2a",
                  "year": 2019,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction to C++ and OOP",
                  "text": "What is Object-oriented Programming (OOP)? Write the basic concepts of OOP.",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it301_2019_2b",
                  "year": 2019,
                  "qNumber": "Q2b",
                   "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What do you mean by class and object?",
                  "type": "Explanation",
                  "marks": 7
                },
                 {
                  "questionId": "it301_2019_3a",
                  "year": 2019,
                  "qNumber": "Q3a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "With an example, explain the terms 'constructor' and 'destructor'.",
                  "type": "Explanation with Example",
                  "marks": 7
                },
                 {
                  "questionId": "it301_2019_3b",
                  "year": 2019,
                  "qNumber": "Q3b",
                  "chapter": "Module 2: Control Structures and Functions",
                  "text": "With an example, explain what virtual function is.",
                  "type": "Explanation with Example",
                  "marks": 7
                },
                 {
                  "questionId": "it301_2019_4a",
                  "year": 2019,
                  "qNumber": "Q4a",
                   "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What do you mean by polymorphism?",
                  "type": "Explanation",
                   "marks": 7
                },
                 {
                  "questionId": "it301_2019_4b",
                  "year": 2019,
                  "qNumber": "Q4b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "With an example, differentiate between run-time and compile-time polymorphism.",
                  "type": "Differentiate with Example",
                   "marks": 7
                },
                {
                  "questionId": "it301_2019_5a",
                  "year": 2019,
                  "qNumber": "Q5a",
                  "chapter": "Module 3: Classes and Data Abstraction",
                  "text": "What is friend function?",
                  "type": "Explanation",
                   "marks": 7
                },
                {
                  "questionId": "it301_2019_5b",
                  "year": 2019,
                  "qNumber": "Q5b",
                   "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is pure virtual function?",
                  "type": "Explanation",
                  "marks": 7
                },
                 {
                  "questionId": "it301_2019_6a",
                  "year": 2019,
                  "qNumber": "Q6a",
                   "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What is abstract class? Write a program to illustrate. Also outline the advantages of abstract class.",
                  "type": "Explanation with Code",
                  "marks": 7
                },
                 {
                  "questionId": "it301_2019_6b",
                  "year": 2019,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Differentiate between abstract class and interface.",
                  "type": "Differentiate",
                  "marks": 7
                },
                 {
                  "questionId": "it301_2019_7",
                  "year": 2019,
                  "qNumber": "Q7",
                   "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "What are various types of inheritance, shown in the following figure?\n\n*   _Figure (i)_ shows Single Inheritance: `A` (Superclass) -> `B` (Subclass)\n*   _Figure (ii)_ shows Multiple Inheritance: `A`, `B` -> `C`\n*   _Figure (iii)_ shows Hierarchical Inheritance: `A` -> `B`, `A` -> `C`",
                  "type": "Explanation from Diagram",
                  "marks": 14
                },
                {
                  "questionId": "it301_2019_8a",
                  "year": 2019,
                  "qNumber": "Q8a",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "What is an exception? What do you mean by exception handling?",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it301_2019_8b",
                  "year": 2019,
                  "qNumber": "Q8b",
                  "chapter": "Module 5: Pointers, Arrays and Exception Handling",
                  "text": "Explain the keywords: `try`, `catch` and `throw`.",
                  "type": "Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it301_2019_9a",
                  "year": 2019,
                  "qNumber": "Q9a",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "With the help of an example program, differentiate between the following: Overloading vs. Overriding",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "it301_2019_9b",
                  "year": 2019,
                  "qNumber": "Q9b",
                  "chapter": "Module 4: Overloading, Templates and Inheritance",
                  "text": "Differentiate between the following: Early binding vs. Late binding",
                  "type": "Differentiate",
                  "marks": 7
                }
              ]
            },
            {

            }
          ]
        }
      ]
    }
  ]
}