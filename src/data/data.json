{
  "branches": [
    {
      "id": "it",
      "name": "INFORMATION TECHNOLOGY",
      "icon": {
        "set": "Ionicons",
        "name": "laptop-outline"
      },
      "semesters": [
        {
          "id": "it_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "it_100304",
              "name": "DATA STRUCTURE & ALGORITHMS",
              "code": "100304",
              "modules": [
                {
                  "id": "m1",
                  "name": "Module 1: Introduction & Analysis",
                  "description": "Basic Terminologies: Elementary Data Organizations, Data Structure Operations: insertion, deletion, traversal etc.; Analysis of an Algorithm, Asymptotic Notations, Time-Space trade off.",
                  "lectures": 4
                },
                {
                  "id": "m2",
                  "name": "Module 2: Stacks and Queues",
                  "description": "ADT Stack and its operations: Algorithms and their complexity analysis, Applications of Stacks: Expression Conversion and evaluation – corresponding algorithms and complexity analysis. ADT queue, Types of Queue: Simple Queue, Circular Queue, Priority Queue; Operations on each Type of Queues: Algorithms and their analysis.",
                  "lectures": 10
                },
                {
                  "id": "m3",
                  "name": "Module 3: Linked Lists",
                  "description": "Singly linked lists: Representation in memory, Algorithms of several operations: Traversing, Searching, Insertion into, Deletion from linked list; Linked representation of Stack and Queue, Header nodes, doubly linked list: operations on it and algorithmic analysis; Circular Linked Lists: all operations their algorithms and the complexity analysis.",
                  "lectures": 6
                },
                {
                  "id": "m4",
                  "name": "Module 4: Searching, Sorting and Hashing",
                  "description": "Linear Search and Binary Search Techniques and their complexity analysis Objective and properties of different sorting algorithms: Selection Sort, Bubble Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort; Performance and Comparison among all the methods, Hashing.",
                  "lectures": 12
                },
                {
                  "id": "m5",
                  "name": "Module 5: Trees and Graphs",
                  "description": "Trees: Basic Tree Terminologies, Different types of Trees: Binary Tree, Threaded Binary Tree, Binary Search Tree, AVL Tree; Tree operations on each of the trees and their algorithms with complexity analysis. Applications of Binary Trees. B Tree, B+ Tree: definitions, algorithms and analysis. Graph: Basic Terminologies and Representations, Graph search and traversal algorithms and complexity analysis.",
                  "lectures": 8
                }
              ],
              "questions": [
                {
                  "questionId": "it_100304_2019_Q1a",
                  "year": 2019,
                  "qNumber": "Q1a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Which of the following points is/are true about linked list data structure when it is compared with array?\n\n(i) Arrays have better cache locality that can make them better in terms of performance.\n(ii) It is easy to insert and delete elements in linked list.\n(iii) The size of array has to be pre-decided, linked lists can change their size any time.\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1b",
                  "year": 2019,
                  "qNumber": "Q1b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the functionality of the following code?\n```java\npublic void function (Node node) {\n  if(size == 0)\n    head = node;\n  else{\n    Node temp, cur;\n    for(cur = head;\n        (temp = cur.getNext())! = null; cur = temp);\n    cur.setNext(node);\n  }\n  size++;\n}\n```\n(i) Inserting a node at the beginning of the list\n(ii) Deleting a node at the beginning of the list\n(iii) Inserting a node at the end of the list\n(iv) Deleting a node at the end of the list",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1c",
                  "year": 2019,
                  "qNumber": "Q1c",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is the space complexity for deleting a linked list?\n\n(i) O(1)\n(ii) O(n)\n(iii) Either O(1) or O(n)\n(iv) O(log n)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1d",
                  "year": 2019,
                  "qNumber": "Q1d",
                  "chapter": "Module 3: Linked Lists",
                  "text": "The situation when in a linked list START=NULL is\n\n(i) underflow\n(ii) overflow\n(iii) housefull\n(iv) saturated",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1e",
                  "year": 2019,
                  "qNumber": "Q1e",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\n\n(i) O(1)\n(ii) O(n)\n(iii) θ(n)\n(iv) θ(1)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1f",
                  "year": 2019,
                  "qNumber": "Q1f",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What kind of linked list is best to answer question like \"What is the item at position n\"?\n\n(i) Singly linked list\n(ii) Doubly linked list\n(iii) Circular linked list\n(iv) Array implementation of linked list",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1g",
                  "year": 2019,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Linked Lists",
                  "text": "A variation of linked list is circular linked list, in which the last node in the list points to first node of the list. One problem with this type of list is\n\n(i) it waste memory space since the pointer head already points to the first node and thus the list node does not need to point to the first node\n(ii) it is not possible to add a node at the end of the list\n(iii) it is difficult to traverse the list as the pointer of the last node is now not NULL\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1h",
                  "year": 2019,
                  "qNumber": "Q1h",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Each node in a linked list must contain at least\n\n(i) three fields\n(ii) two fields\n(iii) four fields\n(iv) five fields",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1i",
                  "year": 2019,
                  "qNumber": "Q1i",
                  "chapter": "Module 3: Linked Lists",
                  "text": "A linear list in which the last node points to the first node is\n\n(i) singly linked list\n(ii) circular linked list\n(iii) doubly linked list\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q1j",
                  "year": 2019,
                  "qNumber": "Q1j",
                  "chapter": "Module 3: Linked Lists",
                  "text": "In a linked list, insertion can be done as\n\n(i) beginning\n(ii) end\n(iii) middle\n(iv) All of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2019_Q2",
                  "year": 2019,
                  "qNumber": "Q2",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "What is a Hash Table, and what is the average case and worst-case time for each of its operations? How can we use this structure to find all anagrams in a dictionary?",
                  "type": "Explanation & Application",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q3",
                  "year": 2019,
                  "qNumber": "Q3",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Describe insertion in max heap tree with example from the following list of numbers: 33, 42, 67, 23, 44, 49, 74",
                  "type": "Explanation with Example",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q4",
                  "year": 2019,
                  "qNumber": "Q4",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Sort the given values using quicksort and write time complexity of algorithm: 65, 70, 75, 80, 85, 60, 55, 50, 45",
                  "type": "Algorithm Application & Analysis",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q5a",
                  "year": 2019,
                  "qNumber": "Q5a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following sequence of elements into an AVL tree, starting with an empty tree : 10, 20, 15, 25, 30, 16, 18, 19",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q5b",
                  "year": 2019,
                  "qNumber": "Q5b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Delete 30 in the AVL tree that you got.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q6a",
                  "year": 2019,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write algorithm for quicksort and mention time and space complexity in each case.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q6b",
                  "year": 2019,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Define collision in hashing. What are the different methodologies to resolve collision? Explain briefly.",
                  "type": "Definition & Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q7",
                  "year": 2019,
                  "qNumber": "Q7",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Construct binary search tree and write pre- and post-order traversals of this tree. 8, 3, 1, 10, 6, 14, 4, 7, 13, 22, 5",
                  "type": "Problem & Traversal",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2019_Q8a",
                  "year": 2019,
                  "qNumber": "Q8a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write algorithm to count leaf node in binary tree and check whether tree is balanced or not.",
                  "type": "Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q8b",
                  "year": 2019,
                  "qNumber": "Q8b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write a recursive and iterative version of insertion sort algorithm and mention time complexity.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2019_Q9a",
                  "year": 2019,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: BFS",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2019_Q9b",
                  "year": 2019,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: DFS",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2019_Q9c",
                  "year": 2019,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Binary search tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2019_Q9d",
                  "year": 2019,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Balance factor",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q1a",
                  "year": 2020,
                  "qNumber": "Q1a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following is time complexity of the given code?\n```cpp\nint a = 0;\nfor (i = 0; i<N; i++) {\n  for (j = N; j>i; j--){\n    a = a + i + j;\n  }\n}\n```\n(i) O(N)\n(ii) O(N*log(N))\n(iii) O(N*Sqrt(N))\n(iv) O(N*N)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1b",
                  "year": 2020,
                  "qNumber": "Q1b",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following is time complexity of the given code?\n```cpp\nint i, j, k = 0;\nfor (i = n/2; i<= n; i++) {\n  for (j = 2; j<= n; j = j*2) {\n    k = k + n/2;\n  }\n}\n```\n(i) O(N)\n(ii) O(N*log(N))\n(iii) O(N*Sqrt(N))\n(iv) O(N*N)",
                  "type": "MCQ_Code",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1c",
                  "year": 2020,
                  "qNumber": "Q1c",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Which of the following cases does not exist in complexity theory?\n\n(i) Best case\n(ii) Worst case\n(iii) Average case\n(iv) Null case",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1d",
                  "year": 2020,
                  "qNumber": "Q1d",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "The operation of processing each element in the list is known as\n\n(i) sorting\n(ii) merging\n(iii) inserting\n(iv) traversal",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1e",
                  "year": 2020,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Arrays are best data structures\n\n(i) for relatively permanent collections of data\n(ii) for the size of the structure and the data in the structure are constantly changing\n(iii) Both (i) and (ii)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1f",
                  "year": 2020,
                  "qNumber": "Q1f",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Each array declaration needs not give, implicitly or explicitly the information about\n\n(i) the name of array\n(ii) the data type of array\n(iii) the first data from the set to be stored\n(iv) the index set of the array",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1g",
                  "year": 2020,
                  "qNumber": "Q1g",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "In general, the binary search method needs not more than ______ comparisons.\n\n(i) [log2 n]-1\n(ii) [log2 n]+1\n(iii) [log2 n]\n(iv) [log2 n]+1",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1h",
                  "year": 2020,
                  "qNumber": "Q1h",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "State True or False :\nA. Binary search is used for searching in a sorted array.\nB. The time complexity of binary search is O(log n).\n\n(i) True, False\n(ii) False, True\n(iii) False, False\n(iv) True, True",
                  "type": "MCQ_TrueFalse",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1i",
                  "year": 2020,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which of the following is non-linear data structure?\n\n(i) Stack\n(ii) Linked list\n(iii) String\n(iv) Tree",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q1j",
                  "year": 2020,
                  "qNumber": "Q1j",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which is the correct output for the following sequence of operations?\npush(5)\npush(8)\npop\npush(2)\npush(5)\npop\npop\npop\npush(1)\npop\n\n(i) 8 5 2 5 1\n(ii) 8 5 5 2 1\n(iii) 8 2 5 5 1\n(iv) 8 1 2 5 5",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2020_Q2",
                  "year": 2020,
                  "qNumber": "Q2",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Analyse the time complexity of the given function and also write the recurrence relation of the function :\n```cpp\nint DoSomething (int n)\n{\n  if (n<= 2)\n    return 1;\n  else\n    return (DoSomething (floor(sqrt(n)))+n);\n}\n```",
                  "type": "Analysis & RecurrenceRelation",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q3",
                  "year": 2020,
                  "qNumber": "Q3",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Consider the following postfix expression : 8 7 3 - / 6 2 5 4 + * + -\nThe above expression is evaluated using stack. Show the content of stack after each step.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q4",
                  "year": 2020,
                  "qNumber": "Q4",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "What are the different notations for comparing the time complexity of an algorithm? Explain each of them with neat figures.",
                  "type": "Explanation with Diagram",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q5",
                  "year": 2020,
                  "qNumber": "Q5",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Explain the queue and circular queue with examples. Also, write the differences between the two.",
                  "type": "Explanation with Example & Differentiate",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q6",
                  "year": 2020,
                  "qNumber": "Q6",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Let a and b be positive integers. Suppose a function F is defined recursively as follows:\nF(a, b) = { 0 if a<b; F(a-b, b)+1 if b<=a }\nFind the values of the following :\n(a) F(2, 3)\n(b) F(14, 3)",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q7a",
                  "year": 2020,
                  "qNumber": "Q7a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write the algorithm of prefix evaluation with example.",
                  "type": "Algorithm with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2020_Q7b",
                  "year": 2020,
                  "qNumber": "Q7b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write prefix notation of the following infix notation : A+B*C+D",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2020_Q8",
                  "year": 2020,
                  "qNumber": "Q8",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "What do you mean by ADT? Explain the ADT stack with test cases for both pop and push.",
                  "type": "Definition & Explanation",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2020_Q9a",
                  "year": 2020,
                  "qNumber": "Q9a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write short notes on the following: Hashing",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q9b",
                  "year": 2020,
                  "qNumber": "Q9b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write short notes on the following: Circular linked list",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q9c",
                  "year": 2020,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: Adjacency list",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2020_Q9d",
                  "year": 2020,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on the following: AVL tree",
                  "type": "Short Notes",
                  "marks": 3.5
                },
                {
                  "questionId": "it_100304_2021_Q1a",
                  "year": 2021,
                  "qNumber": "Q1a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "What is the worst case run-time complexity of binary search algorithm?\n\n(i) O(n^2)\n(ii) O(n^log n)\n(iii) O(n^3)\n(iv) O(n)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1b",
                  "year": 2021,
                  "qNumber": "Q1b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "push() and pop() functions are found in\n\n(i) queues\n(ii) list\n(iii) stacks\n(iv) trees",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1c",
                  "year": 2021,
                  "qNumber": "Q1c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Binary search tree has average case run-time complexity of O(log n). What could be the worst case?\n\n(i) O(n)\n(ii) O(n^2)\n(iii) O(n^3)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1d",
                  "year": 2021,
                  "qNumber": "Q1d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "What will be the running-time of Dijkstra's single-source shortest path algorithm, if the graph G(V, E) is stored in the form of adjacency list and binary heap is used?\n\n(i) O(|V|^2)\n(ii) O(|V|log|V|)\n(iii) O(|E|+|V|log|V|)\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1e",
                  "year": 2021,
                  "qNumber": "Q1e",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Tower of Hanoi is a classic example of\n\n(i) divide and conquer\n(ii) recursive approach\n(iii) (ii) but not (i)\n(iv) Both (i) and (ii)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1f",
                  "year": 2021,
                  "qNumber": "Q1f",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "If locality is a concern, you can use ___ to traverse the graph.\n\n(i) breadth-first search\n(ii) depth-first search\n(iii) either BFS or DFS\n(iv) None of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1g",
                  "year": 2021,
                  "qNumber": "Q1g",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Which data structure is used for balancing of symbols?\n\n(i) Queue\n(ii) Stack\n(iii) Tree\n(iv) Graph",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1h",
                  "year": 2021,
                  "qNumber": "Q1h",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Which data structure is most efficient to find the top 10 largest items out of 1 million items stored in file?\n\n(i) Min heap\n(ii) Max heap\n(iii) Binary search tree\n(iv) AVL tree",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1i",
                  "year": 2021,
                  "qNumber": "Q1i",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "A data structure is required for storing a set of integers such that each of the following operations can be done in (log n) time, where n is the number of elements in the set:\n\n* Deletion of the smallest element\n* Insertion of an element if it is not already present in the set\nWhich of the following can be used?\n\n(i) A heap can be used but not a balanced binary search tree\n(ii) A balanced binary search tree can be used but not a heap\n(iii) Both balanced binary search tree and heap can be used\n(iv) Neither balanced binary search tree nor heap can be used",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q1j",
                  "year": 2021,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The most appropriate matching for the following pairs is\nX. Depth-first search  1. Heap\nY. Breadth-first search 2. Queue\nZ. Sorting              3. Stack\n\n(i) X-1, Y-2, Z-3\n(ii) X-3, Y-1, Z-2\n(iii) X-3, Y-2, Z-1\n(iv) X-2, Y-3, Z-1",
                  "type": "MCQ_Matching",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q2a",
                  "year": 2021,
                  "qNumber": "Q2a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Josephus problem: A group of soldiers is surrounded by an overwhelming army. There is no hope of victory without reinforcements. There is only a single horse available for escape. The soldiers agree to a pact to determine which of them is to escape and summon help. They form a circle, and a number (n) and one of their names are picked from a hat. Beginning with the soldier whose name is picked, they begin to count clockwise around the circle. When the count reaches (n), that soldier is removed from the circle, and the count begins again with the next soldier. The eliminated soldier is no longer a part of the circle. The process continues until one soldier remains and takes the horse to summon help.\nSuppose n=3 and there are five soldiers who form a circle in the order A, B, C, D and E. Let the soldier to start with A, so C is eliminated first, then A gets eliminated second, then E at third, finally B gets eliminated. So D is the one who escapes with the horse.\nWrite a function in C which displays the names of every soldier in the order of their elimination and finally the name of the soldier left, using circular linked list. New list should not be created.",
                  "type": "Problem/Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2021_Q2b",
                  "year": 2021,
                  "qNumber": "Q2b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write a program in C to insert an element after an existing element in a doubly linked list.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2021_Q3a",
                  "year": 2021,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty AVL tree :\n 1, 26, 2, 25, 3, 24, 4, 23, 5\nDisplay the tree after every insertion. Also state the minimum number of nodes which are required to construct AVL tree of height 7 (note that the root is at level 0).",
                  "type": "Problem & Analysis",
                  "marks": 8
                },
                {
                  "questionId": "it_100304_2021_Q3b",
                  "year": 2021,
                  "qNumber": "Q3b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Sort the following numbers in ascending order using heapsort. Show step-by-step analysis: 25, 57, 48, 37, 12, 92, 86, 33",
                  "type": "Algorithm Application",
                  "marks": 6
                },
                {
                  "questionId": "it_100304_2021_Q4",
                  "year": 2021,
                  "qNumber": "Q4",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty B tree of order 5 and display the tree at every split :\n 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1\nNow delete the following elements from the tree, in the given sequence, and display the tree at every merge.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2021_Q5",
                  "year": 2021,
                  "qNumber": "Q5",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Insert the following numbers, in the given sequence, in an empty B+ tree of order 3 and display the tree at every split : \n10, 20, 30, 90, 80, 60, 70, 40, 50, 66, 16, 84, 21, 76\nNow delete the following elements from the tree, in the given sequence, and display the tree at every merge.",
                  "type": "Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2021_Q6a",
                  "year": 2021,
                  "qNumber": "Q6a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Construct the Huffman tree for data given in the table below :\nAlphabet | Frequency\n---------------------\nR | 5\nT | 6\nY | 2\nC | 16\nS | 3\nL | 60\nA | 8",
                  "type": "Problem",
                  "marks": 8
                },
                {
                  "questionId": "it_100304_2021_Q6b",
                  "year": 2021,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Show at every step the contents of the hash table after inserting the keys in the order 23, 11, 4, 17, 84, 22, 33. The hash function is given as h(key) = key%11\nThe hash table has a space for 11 keys only. Resolve collision using-\n(i) linear probing;\n(ii) quadratic probing.",
                  "type": "Problem",
                  "marks": 6
                },
                {
                  "questionId": "it_100304_2021_Q7a",
                  "year": 2021,
                  "qNumber": "Q7a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Differentiate between the following: Abstract Data Type and Data Structure",
                  "type": "Differentiate",
                  "marks": 4
                },
                {
                  "questionId": "it_100304_2021_Q7b",
                  "year": 2021,
                  "qNumber": "Q7b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Differentiate between the following: Stack and Queue",
                  "type": "Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "it_100304_2021_Q7c",
                  "year": 2021,
                  "qNumber": "Q7c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Differentiate between the following: Depth-first search and Breadth-first search",
                  "type": "Differentiate",
                  "marks": 5
                },
                {
                  "questionId": "it_100304_2021_Q8",
                  "year": 2021,
                  "qNumber": "Q8",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Explain in detail the Kruskal's and Prim's algorithms for constructing minimum spanning tree. For the weighted undirected graph given below, construct the minimum cost spanning tree for the given graph using Kruskal's algorithm and Prim's algorithm when the starting vertex is R1 :\n ![graph](https://mtjwwpxkwpaagqsnfbks.supabase.co/storage/v1/object/public/images//it_100304_2021_Q8.png)",
                  "type": "Explanation & Problem",
                  "marks": 14
                },
                {
                  "questionId": "it_100304_2021_Q9a",
                  "year": 2021,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9b",
                  "year": 2021,
                  "qNumber": "Q9b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9c",
                  "year": 2021,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Strictly binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9d",
                  "year": 2021,
                  "qNumber": "Q9d",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Complete binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9e",
                  "year": 2021,
                  "qNumber": "Q9e",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Full binary tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9f",
                  "year": 2021,
                  "qNumber": "Q9f",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Min heap",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2021_Q9g",
                  "year": 2021,
                  "qNumber": "Q9g",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Define the following: Skew tree",
                  "type": "Definition",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1a",
                  "year": 2022,
                  "qNumber": "Q1a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "In a stack, if a user tries to remove an element from empty stack it is called:\n(i) underflow\n(ii) empty collection\n(iii) garbage collection\n(iv) overflow",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1b",
                  "year": 2022,
                  "qNumber": "Q1b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Consider the binary max-heap implemented using an array. Which one of the following array represents the heap:\n(i) 25, 12, 16, 13, 10, 8, 14\n(ii) 25, 12, 16, 13, 10, 8, 14\n(iii) 25, 14, 16, 13, 10, 8, 12\n(iv) 25, 14, 12, 13, 10, 8, 16",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1c",
                  "year": 2022,
                  "qNumber": "Q1c",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "A hash function is defined as h(key) = key mod 7, with linear probing used to insert keys 44, 45, 79, 55, 91, 18, 63 into a table indexed from 0 to 6. What will be the location of key 18.\n(i) 3\n(ii) 4\n(iii) 5\n(iv) 6",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1d",
                  "year": 2022,
                  "qNumber": "Q1d",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "If the number of values to be sorted is already partially sorted, then ______ sorting can be efficient.\n(i) merge\n(ii) insertion\n(iii) bubble\n(iv) selection",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1e",
                  "year": 2022,
                  "qNumber": "Q1e",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "The time complexity of merge sort is:\n(i) O(n)\n(ii) O(logn)\n(iii) O(nlogn)\n(iv) O(n2)",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1f",
                  "year": 2022,
                  "qNumber": "Q1f",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "State true or false:\nA: Binary search is used for searching in a sorted array.\nB: The time complexity of binary search is O(logn)\n(i) True, False\n(ii) False, True\n(iii) False, False\n(iv) True, True",
                  "type": "MCQ_TrueFalse",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1g",
                  "year": 2022,
                  "qNumber": "Q1g",
                  "chapter": "Module 3: Linked Lists",
                  "text": "In a circular linked list organization, insertion of a record involves modification of\n(i) One pointer\n(ii) Two pointers\n(iii) More than two pointers\n(iv) No pointer",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1h",
                  "year": 2022,
                  "qNumber": "Q1h",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Level order traversal of a rooted tree can be done by starting from the root and performing\n(i) pre-order traversal\n(ii) in-order traversal\n(iii) depth first search\n(iv) breadth first search",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1i",
                  "year": 2022,
                  "qNumber": "Q1i",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "An Abstract Data Type (ADT) is\n(i) same as an abstract class\n(ii) a data type that cannot be instantiated\n(iii) a data type for which only the operations defined on it can be used, but none else\n(iv) all of the above",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q1j",
                  "year": 2022,
                  "qNumber": "Q1j",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "How many distinct BSTs can be constructed with 3 distinct keys?\n(i) 4\n(ii) 5\n(iii) 6\n(iv) 9",
                  "type": "MCQ",
                  "marks": 2
                },
                {
                  "questionId": "it_100304_2022_Q2a",
                  "year": 2022,
                  "qNumber": "Q2a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Explain different asymptotic notations (Big-O, Ω, Θ) used for comparing the time complexity of an algorithm with neat figures.",
                  "type": "Explanation with Diagram",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q2b",
                  "year": 2022,
                  "qNumber": "Q2b",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "The run time of an algorithm is represented by the recurrence relation T(n) = 2T(n/2) + n; n ≥ 2 and with boundary condition T(1) = 0. What is the time complexity (in terms of Θ notation).",
                  "type": "Problem/Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q3a",
                  "year": 2022,
                  "qNumber": "Q3a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Discuss pre-order, in-order and post-order traversal techniques of binary tree. Write a C function for non-recursive pre-order traversal.",
                  "type": "Explanation & Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q3b",
                  "year": 2022,
                  "qNumber": "Q3b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "The pre-order traversal sequence of a Binary Search Tree (BST) is 30, 20, 10, 15, 25, 23, 39, 35, 42. Write step by step process to derive the BST and find post-order traversal also.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q4a",
                  "year": 2022,
                  "qNumber": "Q4a",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Consider a circular queue of capacity n-elements implemented with an array. Write C functions for insertion and deletion operations.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q4b",
                  "year": 2022,
                  "qNumber": "Q4b",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Convert the given infix expression into postfix using stack: A + B / C * (D + E) - F. For each input symbol clearly mention the action taken and status of the stack during conversion.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q5a",
                  "year": 2022,
                  "qNumber": "Q5a",
                  "chapter": "Module 3: Linked Lists",
                  "text": "Write a C function to delete last node from a singly linked list.",
                  "type": "Code",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q5b",
                  "year": 2022,
                  "qNumber": "Q5b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Create a max-heap by inserting following keys in the given order. Show each insertion step with clear illustration: 25, 35, 18, 9, 46, 70, 48.",
                  "type": "Problem",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q6a",
                  "year": 2022,
                  "qNumber": "Q6a",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write an algorithm for merge sort and discuss space and time complexity.",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q6b",
                  "year": 2022,
                  "qNumber": "Q6b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Define collision in hashing. Explain briefly different methodologies to resolve collision.",
                  "type": "Definition & Explanation",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q7a",
                  "year": 2022,
                  "qNumber": "Q7a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write algorithm to count leaf nodes in a binary tree. What is the complexity of your algorithm?",
                  "type": "Algorithm & Analysis",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q7b",
                  "year": 2022,
                  "qNumber": "Q7b",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Compare BFS and DFS traversal techniques for graph. Write an algorithm to perform BFS using queue.",
                  "type": "Comparison & Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q8a",
                  "year": 2022,
                  "qNumber": "Q8a",
                  "chapter": "Module 1: Introduction & Analysis",
                  "text": "Differentiate between system defined data types and abstract data types with suitable examples.",
                  "type": "Differentiate with Example",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q8b",
                  "year": 2022,
                  "qNumber": "Q8b",
                  "chapter": "Module 3: Linked Lists",
                  "text": "What is doubly linked list? What are its applications? Explain how a node can be added as last node using appropriate pseudo code",
                  "type": "Explanation & Algorithm",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9a",
                  "year": 2022,
                  "qNumber": "Q9a",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on any two of the following: AVL Rotations",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9b",
                  "year": 2022,
                  "qNumber": "Q9b",
                  "chapter": "Module 4: Searching, Sorting and Hashing",
                  "text": "Write short notes on any two of the following: Open Addressing & Chaining",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9c",
                  "year": 2022,
                  "qNumber": "Q9c",
                  "chapter": "Module 5: Trees and Graphs",
                  "text": "Write short notes on any two of the following: B-Tree",
                  "type": "Short Notes",
                  "marks": 7
                },
                {
                  "questionId": "it_100304_2022_Q9d",
                  "year": 2022,
                  "qNumber": "Q9d",
                  "chapter": "Module 2: Stacks and Queues",
                  "text": "Write short notes on any two of the following: Priority Queue",
                  "type": "Short Notes",
                  "marks": 7
                }
              ]
            },
            {
              "id": "it_100305",
              "name": "DIGITAL ELECTRONICS",
              "code": "100305",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_100311",
              "name": "MATHEMATICS-III (DIFFERENTIAL CALCULUS)",
              "code": "100311",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_100313",
              "name": "OBJECT ORIENTED PROGRAMMING USING C++",
              "code": "100313",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_100314",
              "name": "TECHNICAL WRITING",
              "code": "100314",
              "modules": [],
              "questions": []
            },
            {
              "id": "it_106301",
              "name": "DISCRETE MATHEMATICS",
              "code": "106301",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "ce",
      "name": "CIVIL ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "bridge"
      },
      "semesters": [
        {
          "id": "ce_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "ce_100301",
              "name": "BIOLOGY FOR ENGINEERS",
              "code": "100301",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_100312",
              "name": "MATHEMATICS-III (PDE, PROBABILILTY AND STATISTICS)",
              "code": "100312",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101302",
              "name": "BASIC ELECTRONICS",
              "code": "101302",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101303",
              "name": "COMPUTER AIDED CIVIL ENGINEERING DRAWING",
              "code": "101303",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101304",
              "name": "ENGINEERING MECHANICS",
              "code": "101304",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101305",
              "name": "HUMANITIES-I(EFFECTIVE TECHNICAL COMMUNICATION)",
              "code": "101305",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101306",
              "name": "INTRODUCTION TO CIVIL ENGINEERING",
              "code": "101306",
              "modules": [],
              "questions": []
            },
            {
              "id": "ce_101308",
              "name": "SURVEYING & GEOMATICS",
              "code": "101308",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "me",
      "name": "MECHANICAL ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "cogs"
      },
      "semesters": [
        {
          "id": "me_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "me_100301",
              "name": "BIOLOGY FOR ENGINEERS",
              "code": "100301",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_100303",
              "name": "BASIC ELECTRONICS ENGINEERING",
              "code": "100303",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_100309",
              "name": "ENGINEERING MECHANICS",
              "code": "100309",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_100312",
              "name": "MATHEMATICS-III (PDE, PROBABILILTY AND STATISTICS)",
              "code": "100312",
              "modules": [],
              "questions": []
            },
            {
              "id": "me_102304",
              "name": "THERMODYNAMICS",
              "code": "102304",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "ee",
      "name": "ELECTRICAL ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "flash"
      },
      "semesters": [
        {
          "id": "ee_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "ee_100302",
              "name": "ANALOG ELECTRONIC CIRCUITS",
              "code": "100302",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100306",
              "name": "ELECTRICAL CIRCUIT ANALYSIS",
              "code": "100306",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100307",
              "name": "ELECTRICAL MACHINES - I",
              "code": "100307",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100308",
              "name": "ELECTROMAGNETIC FIELDS",
              "code": "100308",
              "modules": [],
              "questions": []
            },
            {
              "id": "ee_100310",
              "name": "ENGINEERING MECHANICS",
              "code": "100310",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "ece",
      "name": "ELECTRONICS & COMMUNICATION ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "cellphone-wireless"
      },
      "semesters": [
        {
          "id": "ece_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "ece_100313",
              "name": "OBJECT ORIENTED PROGRAMMING USING C++",
              "code": "100313",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104301",
              "name": "BASIC ELECTRONICS",
              "code": "104301",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104302",
              "name": "ELECTRICAL & ELECTRONIC MATERIAL",
              "code": "104302",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104303",
              "name": "MATHEMATICS-III",
              "code": "104303",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104304",
              "name": "NETWORK THEORY",
              "code": "104304",
              "modules": [],
              "questions": []
            },
            {
              "id": "ece_104305",
              "name": "SIGNALS AND SYSTEMS",
              "code": "104305",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "cse",
      "name": "COMPUTER SCIENCE & ENGINEERING",
      "icon": {
        "set": "Ionicons",
        "name": "code-slash-outline"
      },
      "semesters": [
        {
          "id": "cse_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "cse_100302",
              "name": "ANALOG ELECTRONIC CIRCUITS",
              "code": "100302",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100304",
              "name": "DATA STRUCTURE & ALGORITHMS",
              "code": "100304",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100311",
              "name": "MATHEMATICS-III (DIFFERENTIAL CALCULUS)",
              "code": "100311",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100313",
              "name": "OBJECT ORIENTED PROGRAMMING USING C++",
              "code": "100313",
              "modules": [],
              "questions": []
            },
            {
              "id": "cse_100314",
              "name": "TECHNICAL WRITING",
              "code": "100314",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    },
    {
      "id": "lt",
      "name": "LEATHER TECHNOLOGY ENGINEERING",
      "icon": {
        "set": "MaterialCommunityIcons",
        "name": "shoe-print"
      },
      "semesters": [
        {
          "id": "lt_sem3",
          "number": 3,
          "subjects": [
            {
              "id": "lt_100303",
              "name": "BASIC ELECTRONICS ENGINEERING",
              "code": "100303",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_100309",
              "name": "ENGINEERING MECHANICS",
              "code": "100309",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_100312",
              "name": "MATHEMATICS-III (PDE, PROBABILILTY AND STATISTICS)",
              "code": "100312",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_107301",
              "name": "PHYSICS(WAVES AND OPTICS)",
              "code": "107301",
              "modules": [],
              "questions": []
            },
            {
              "id": "lt_107302",
              "name": "INTRODUCTION TO LEATHER TECHNOLOGY",
              "code": "107302",
              "modules": [],
              "questions": []
            }
          ]
        }
      ]
    }
  ]
}